cbuffer cb0_t : register(b160)
{
    float4 cb0_m[14] : packoffset(c0);
};

cbuffer cb4_t : register(b164)
{
    float4 cb4_m[4096] : packoffset(c0);
};

cbuffer cb6_t : register(b166)
{
    float4 cb6_m[3] : packoffset(c0);
};

cbuffer cb2_t : register(b162)
{
    float4 cb2_m[4] : packoffset(c0);
};

uniform float4 gl_HalfPixel;

static float4 gl_Position;
static float gl_PointSize;
static float3 v0;
static float3 v1;
static float4 v2;
static int4 v3;

struct SPIRV_Cross_Input
{
    float3 v0 : TEXCOORD0;
    float3 v1 : TEXCOORD1;
    float4 v2 : TEXCOORD2;
    float4 v3 : TEXCOORD3;
};

struct SPIRV_Cross_Output
{
    float4 gl_Position : POSITION;
    float gl_PointSize : PSIZE;
};

static float4 shader_in[4];
static float4 o0;
static float4 o1;
static float4 r0;
static float4 r1;
static float4 r2;
static float4 r3;
static float4 r4;
static float4 r5;
static float4 r6;

void vs_main()
{
    float4 _57 = r0;
    _57.x = shader_in[2].y + shader_in[2].x;
    r0 = _57;
    float4 _65 = r0;
    _65.x = r0.x + shader_in[2].z;
    r0 = _65;
    float4 _73 = r0;
    _73.x = r0.x + shader_in[2].w;
    r0 = _73;
    float4 _80 = r0;
    _80.x = asfloat(1065353216u) / r0.x;
    r0 = _80;
    r1 = float4(shader_in[0].xyz.x, shader_in[0].xyz.y, shader_in[0].xyz.z, r1.w);
    float4 _90 = r1;
    _90.w = asfloat(1065353216u);
    r1 = _90;
    r2 = asfloat(asint(shader_in[3]) * int4(uint4(3u, 3u, 3u, 3u)));
    int _107 = asint(r2.y);
    r3 = shader_in[2].yyyy * float4(cb4_m[_107].x, cb4_m[_107].y, cb4_m[_107].z, cb4_m[_107].w);
    int _130 = asint(r2.x);
    r3 = (shader_in[2].xxxx * float4(cb4_m[_130].x, cb4_m[_130].y, cb4_m[_130].z, cb4_m[_130].w)) + r3;
    int _149 = asint(r2.z);
    r3 = (shader_in[2].zzzz * float4(cb4_m[_149].x, cb4_m[_149].y, cb4_m[_149].z, cb4_m[_149].w)) + r3;
    int _168 = asint(r2.w);
    r3 = (shader_in[2].wwww * float4(cb4_m[_168].x, cb4_m[_168].y, cb4_m[_168].z, cb4_m[_168].w)) + r3;
    float4 _197 = r4;
    _197.x = mad(r3.w, r1.w, mad(r3.z, r1.z, mad(r3.y, r1.y, r3.x * r1.x)));
    r4 = _197;
    int _206 = asint(r2.y) + 1;
    r5 = shader_in[2].yyyy * float4(cb4_m[_206].x, cb4_m[_206].y, cb4_m[_206].z, cb4_m[_206].w);
    int _225 = asint(r2.x) + 1;
    r5 = (shader_in[2].xxxx * float4(cb4_m[_225].x, cb4_m[_225].y, cb4_m[_225].z, cb4_m[_225].w)) + r5;
    int _245 = asint(r2.z) + 1;
    r5 = (shader_in[2].zzzz * float4(cb4_m[_245].x, cb4_m[_245].y, cb4_m[_245].z, cb4_m[_245].w)) + r5;
    int _265 = asint(r2.w) + 1;
    r5 = (shader_in[2].wwww * float4(cb4_m[_265].x, cb4_m[_265].y, cb4_m[_265].z, cb4_m[_265].w)) + r5;
    float4 _293 = r4;
    _293.y = mad(r5.w, r1.w, mad(r5.z, r1.z, mad(r5.y, r1.y, r5.x * r1.x)));
    r4 = _293;
    int _301 = asint(r2.y) + 2;
    r6 = shader_in[2].yyyy * float4(cb4_m[_301].x, cb4_m[_301].y, cb4_m[_301].z, cb4_m[_301].w);
    int _320 = asint(r2.x) + 2;
    r6 = (shader_in[2].xxxx * float4(cb4_m[_320].x, cb4_m[_320].y, cb4_m[_320].z, cb4_m[_320].w)) + r6;
    int _340 = asint(r2.z) + 2;
    r6 = (shader_in[2].zzzz * float4(cb4_m[_340].x, cb4_m[_340].y, cb4_m[_340].z, cb4_m[_340].w)) + r6;
    int _360 = asint(r2.w) + 2;
    r2 = (shader_in[2].wwww * float4(cb4_m[_360].x, cb4_m[_360].y, cb4_m[_360].z, cb4_m[_360].w)) + r6;
    float4 _388 = r4;
    _388.z = mad(r2.w, r1.w, mad(r2.z, r1.z, mad(r2.y, r1.y, r2.x * r1.x)));
    r4 = _388;
    float3 _394 = r0.xxx * r4.xyz;
    r1 = float4(_394.x, _394.y, _394.z, r1.w);
    float4 _398 = r1;
    _398.w = asfloat(1065353216u);
    r1 = _398;
    float4 _409 = float4(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z, cb6_m[0].w);
    float4 _423 = r4;
    _423.x = mad(_409.w, r1.w, mad(_409.z, r1.z, mad(_409.y, r1.y, _409.x * r1.x)));
    r4 = _423;
    float4 _434 = float4(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z, cb6_m[1].w);
    float4 _448 = r4;
    _448.y = mad(_434.w, r1.w, mad(_434.z, r1.z, mad(_434.y, r1.y, _434.x * r1.x)));
    r4 = _448;
    float4 _459 = float4(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z, cb6_m[2].w);
    float4 _473 = r4;
    _473.z = mad(_459.w, r1.w, mad(_459.z, r1.z, mad(_459.y, r1.y, _459.x * r1.x)));
    r4 = _473;
    float4 _476 = r4;
    _476.w = asfloat(1065353216u);
    r4 = _476;
    float4 _487 = float4(cb0_m[0].x, cb0_m[0].y, cb0_m[0].z, cb0_m[0].w);
    float4 _501 = o0;
    _501.x = mad(_487.w, r4.w, mad(_487.z, r4.z, mad(_487.y, r4.y, _487.x * r4.x)));
    o0 = _501;
    float4 _512 = float4(cb0_m[1].x, cb0_m[1].y, cb0_m[1].z, cb0_m[1].w);
    float4 _526 = o0;
    _526.y = mad(_512.w, r4.w, mad(_512.z, r4.z, mad(_512.y, r4.y, _512.x * r4.x)));
    o0 = _526;
    float4 _537 = float4(cb0_m[2].x, cb0_m[2].y, cb0_m[2].z, cb0_m[2].w);
    float4 _551 = o0;
    _551.z = mad(_537.w, r4.w, mad(_537.z, r4.z, mad(_537.y, r4.y, _537.x * r4.x)));
    o0 = _551;
    float4 _562 = float4(cb0_m[3].x, cb0_m[3].y, cb0_m[3].z, cb0_m[3].w);
    float4 _576 = o0;
    _576.w = mad(_562.w, r4.w, mad(_562.z, r4.z, mad(_562.y, r4.y, _562.x * r4.x)));
    o0 = _576;
    float3 _589 = (shader_in[1].xyz * asfloat(uint3(1073741824u, 1073741824u, 1073741824u))) + asfloat(uint3(3212836864u, 3212836864u, 3212836864u));
    r0 = float4(r0.x, _589.x, _589.y, _589.z);
    float4 _605 = r1;
    _605.x = mad(r3.xyz.z, r0.yzw.z, mad(r3.xyz.y, r0.yzw.y, r3.xyz.x * r0.yzw.x));
    r1 = _605;
    float4 _620 = r1;
    _620.y = mad(r5.xyz.z, r0.yzw.z, mad(r5.xyz.y, r0.yzw.y, r5.xyz.x * r0.yzw.x));
    r1 = _620;
    float4 _635 = r1;
    _635.z = mad(r2.xyz.z, r0.yzw.z, mad(r2.xyz.y, r0.yzw.y, r2.xyz.x * r0.yzw.x));
    r1 = _635;
    float3 _641 = r0.xxx * r1.xyz;
    r0 = float4(_641.x, _641.y, _641.z, r0.w);
    float4 _657 = r0;
    _657.w = mad(r0.xyz.z, r0.xyz.z, mad(r0.xyz.y, r0.xyz.y, r0.xyz.x * r0.xyz.x));
    r0 = _657;
    float4 _662 = r0;
    _662.w = rsqrt(r0.w);
    r0 = _662;
    float3 _668 = r0.www * r0.xyz;
    r0 = float4(_668.x, _668.y, _668.z, r0.w);
    float3 _678 = float3(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z);
    float4 _690 = r1;
    _690.x = mad(_678.z, r0.xyz.z, mad(_678.y, r0.xyz.y, _678.x * r0.xyz.x));
    r1 = _690;
    float3 _699 = float3(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z);
    float4 _711 = r1;
    _711.y = mad(_699.z, r0.xyz.z, mad(_699.y, r0.xyz.y, _699.x * r0.xyz.x));
    r1 = _711;
    float3 _720 = float3(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z);
    float4 _732 = r1;
    _732.z = mad(_720.z, r0.xyz.z, mad(_720.y, r0.xyz.y, _720.x * r0.xyz.x));
    r1 = _732;
    float4 _747 = r0;
    _747.x = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _747;
    float4 _752 = r0;
    _752.x = rsqrt(r0.x);
    r0 = _752;
    float3 _758 = r0.xxx * r1.xyz;
    r0 = float4(_758.x, _758.y, _758.z, r0.w);
    float3 _773 = (-r4.xyz) + float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z);
    r1 = float4(_773.x, _773.y, _773.z, r1.w);
    float3 _787 = r4.xyz + (-float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z));
    r2 = float4(_787.x, _787.y, _787.z, r2.w);
    float4 _803 = r0;
    _803.w = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _803;
    float4 _808 = r0;
    _808.w = rsqrt(r0.w);
    r0 = _808;
    float3 _814 = r0.www * r1.xyz;
    r1 = float4(_814.x, _814.y, _814.z, r1.w);
    float3 _821 = r1.xyz * asfloat(uint3(0u, 1065353216u, 0u));
    r3 = float4(_821.x, _821.y, _821.z, r3.w);
    float3 _832 = (r1.yzx * asfloat(uint3(0u, 0u, 1065353216u))) + (-r3.xyz);
    r3 = float4(_832.x, _832.y, _832.z, r3.w);
    float4 _846 = r0;
    _846.w = mad(r3.yz.y, r3.yz.y, r3.yz.x * r3.yz.x);
    r0 = _846;
    float4 _851 = r0;
    _851.w = rsqrt(r0.w);
    r0 = _851;
    float3 _857 = r0.www * r3.xyz;
    r3 = float4(_857.x, _857.y, _857.z, r3.w);
    float3 _864 = r1.yzx * r3.xyz;
    r4 = float4(_864.x, _864.y, _864.z, r4.w);
    float3 _875 = (r3.zxy * r1.zxy) + (-r4.xyz);
    r3 = float4(_875.x, _875.y, _875.z, r3.w);
    float4 _891 = r0;
    _891.w = mad(r1.xyz.z, r0.xyz.z, mad(r1.xyz.y, r0.xyz.y, r1.xyz.x * r0.xyz.x));
    r0 = _891;
    float4 _897 = r0;
    _897.w = max(r0.w, asfloat(0u));
    r0 = _897;
    float4 _912 = r1;
    _912.x = mad(r3.xyz.z, r3.xyz.z, mad(r3.xyz.y, r3.xyz.y, r3.xyz.x * r3.xyz.x));
    r1 = _912;
    float4 _917 = r1;
    _917.x = rsqrt(r1.x);
    r1 = _917;
    float3 _923 = r1.xxx * r3.xyz;
    r1 = float4(_923.x, _923.y, _923.z, r1.w);
    float4 _939 = r0;
    _939.x = mad(r1.xyz.z, r0.xyz.z, mad(r1.xyz.y, r0.xyz.y, r1.xyz.x * r0.xyz.x));
    r0 = _939;
    float4 _948 = r0;
    _948.x = (r0.x * asfloat(1056964608u)) + asfloat(1056964608u);
    r0 = _948;
    float4 _956 = r0;
    _956.y = r0.x * cb2_m[2].w;
    r0 = _956;
    float4 _964 = r0;
    _964.x = r0.w * cb2_m[2].z;
    r0 = _964;
    float4 _971 = r0;
    _971.z = (-r0.w) + asfloat(1065353216u);
    r0 = _971;
    float4 _976 = r0;
    _976.z = log2(r0.z);
    r0 = _976;
    float2 _986 = r0.zz * float2(cb2_m[2].x, cb2_m[2].y);
    r0 = float4(r0.x, r0.y, _986.x, _986.y);
    float2 _991 = exp2(r0.zw);
    r0 = float4(r0.x, r0.y, _991.x, _991.y);
    float2 _1008 = (cb0_m[12].x.xx * float2(cb2_m[3].x, cb2_m[3].y)) + r0.xy;
    o1 = float4(_1008.x, _1008.y, o1.z, o1.w);
    float4 _1017 = r0;
    _1017.x = (-r0.z) + r0.w;
    r0 = _1017;
    float4 _1025 = r0;
    _1025.y = cb2_m[3].z + asfloat(1008981770u);
    r0 = _1025;
    float4 _1031 = r0;
    _1031.y = asfloat(1073741824u) / r0.y;
    r0 = _1031;
    float4 _1039 = r0;
    _1039.y = r0.y * cb0_m[12].z;
    r0 = _1039;
    float4 _1045 = r0;
    _1045.y = cos(r0.yyyy.y);
    r0 = _1045;
    float4 _1051 = r0;
    _1051.y = r0.y + asfloat(1065353216u);
    r0 = _1051;
    float4 _1057 = r0;
    _1057.y = r0.y * asfloat(1056964608u);
    r0 = _1057;
    float4 _1067 = o1;
    _1067.z = (r0.y * r0.x) + r0.z;
    o1 = _1067;
    float4 _1076 = r0;
    _1076.x = r2.y * cb0_m[13].x;
    r0 = _1076;
    float4 _1083 = r0;
    _1083.y = r0.x * asfloat(3216550459u);
    r0 = _1083;
    float4 _1088 = r0;
    _1088.y = exp2(r0.y);
    r0 = _1088;
    float4 _1095 = r0;
    _1095.y = (-r0.y) + asfloat(1065353216u);
    r0 = _1095;
    float4 _1102 = r0;
    _1102.x = r0.y / r0.x;
    r0 = _1102;
    float4 _1113 = r0;
    _1113.y = asfloat((asfloat(1008981770u) < abs(r2.y)) ? 4294967295u : 0u);
    r0 = _1113;
    float4 _1128 = r0;
    _1128.z = mad(r2.xyz.z, r2.xyz.z, mad(r2.xyz.y, r2.xyz.y, r2.xyz.x * r2.xyz.x));
    r0 = _1128;
    float4 _1133 = r0;
    _1133.z = sqrt(r0.z);
    r0 = _1133;
    float4 _1141 = r0;
    _1141.z = r0.z * cb0_m[13].y;
    r0 = _1141;
    float4 _1151 = r0;
    _1151.x = (asuint(r0.y) != 0u) ? r0.x : asfloat(1065353216u);
    r0 = _1151;
    float4 _1163 = r0;
    _1163.x = (r0.x * r0.z) + (-cb0_m[13].w);
    r0 = _1163;
    float4 _1169 = r0;
    _1169.x = exp2(-r0.x);
    r0 = _1169;
    float4 _1175 = r0;
    _1175.x = min(r0.x, asfloat(1065353216u));
    r0 = _1175;
    float4 _1182 = o1;
    _1182.w = (-r0.x) + asfloat(1065353216u);
    o1 = _1182;
}

void vert_main()
{
    shader_in[0] = float4(v0.x, v0.y, v0.z, shader_in[0].w);
    shader_in[1] = float4(v1.x, v1.y, v1.z, shader_in[1].w);
    shader_in[2] = v2;
    shader_in[3] = asfloat(v3);
    vs_main();
    gl_Position = o0;
    gl_PointSize = 1.0f;
    gl_Position.x = gl_Position.x - gl_HalfPixel.x * gl_Position.w;
    gl_Position.y = gl_Position.y + gl_HalfPixel.y * gl_Position.w;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    v0 = stage_input.v0;
    v1 = stage_input.v1;
    v2 = stage_input.v2;
    v3 = stage_input.v3;
    vert_main();
    SPIRV_Cross_Output stage_output;
    stage_output.gl_Position = gl_Position;
    stage_output.gl_PointSize = gl_PointSize;
    return stage_output;
}
