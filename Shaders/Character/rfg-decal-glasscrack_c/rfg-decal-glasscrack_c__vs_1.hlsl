cbuffer cb0_t : register(b160)
{
    float4 cb0_m[14] : packoffset(c0);
};

cbuffer cb1_t : register(b161)
{
    float4 cb1_m[2] : packoffset(c0);
};

cbuffer cb4_t : register(b164)
{
    float4 cb4_m[4096] : packoffset(c0);
};

cbuffer cb5_t : register(b165)
{
    float4 cb5_m[7] : packoffset(c0);
};

cbuffer cb6_t : register(b166)
{
    float4 cb6_m[3] : packoffset(c0);
};

uniform float4 gl_HalfPixel;

static float4 gl_Position;
static float gl_PointSize;
static float3 v0;
static float3 v1;
static float4 v2;
static int4 v3;

struct SPIRV_Cross_Input
{
    float3 v0 : TEXCOORD0;
    float3 v1 : TEXCOORD1;
    float4 v2 : TEXCOORD2;
    float4 v3 : TEXCOORD3;
};

struct SPIRV_Cross_Output
{
    float4 gl_Position : POSITION;
    float gl_PointSize : PSIZE;
};

static float4 shader_in[4];
static float4 o0;
static float3 o1;
static float4 o2;
static float4 o3;
static float4 o4;
static float4 o5;
static float4 o6;
static float4 r0;
static float4 r1;
static float4 r2;
static float4 r3;
static float4 r4;
static float4 r5;
static float4 r6;

void vs_main()
{
    float4 _68 = r0;
    _68.x = shader_in[2].y + shader_in[2].x;
    r0 = _68;
    float4 _76 = r0;
    _76.x = r0.x + shader_in[2].z;
    r0 = _76;
    float4 _84 = r0;
    _84.x = r0.x + shader_in[2].w;
    r0 = _84;
    float4 _91 = r0;
    _91.x = asfloat(1065353216u) / r0.x;
    r0 = _91;
    r1 = float4(shader_in[0].xyz.x, shader_in[0].xyz.y, shader_in[0].xyz.z, r1.w);
    float4 _101 = r1;
    _101.w = asfloat(1065353216u);
    r1 = _101;
    r2 = asfloat(asint(shader_in[3]) * int4(uint4(3u, 3u, 3u, 3u)));
    int _118 = asint(r2.y);
    r3 = shader_in[2].yyyy * float4(cb4_m[_118].x, cb4_m[_118].y, cb4_m[_118].z, cb4_m[_118].w);
    int _140 = asint(r2.x);
    r3 = (shader_in[2].xxxx * float4(cb4_m[_140].x, cb4_m[_140].y, cb4_m[_140].z, cb4_m[_140].w)) + r3;
    int _159 = asint(r2.z);
    r3 = (shader_in[2].zzzz * float4(cb4_m[_159].x, cb4_m[_159].y, cb4_m[_159].z, cb4_m[_159].w)) + r3;
    int _178 = asint(r2.w);
    r3 = (shader_in[2].wwww * float4(cb4_m[_178].x, cb4_m[_178].y, cb4_m[_178].z, cb4_m[_178].w)) + r3;
    float4 _207 = r4;
    _207.x = mad(r3.w, r1.w, mad(r3.z, r1.z, mad(r3.y, r1.y, r3.x * r1.x)));
    r4 = _207;
    int _216 = asint(r2.y) + 1;
    r5 = shader_in[2].yyyy * float4(cb4_m[_216].x, cb4_m[_216].y, cb4_m[_216].z, cb4_m[_216].w);
    int _235 = asint(r2.x) + 1;
    r5 = (shader_in[2].xxxx * float4(cb4_m[_235].x, cb4_m[_235].y, cb4_m[_235].z, cb4_m[_235].w)) + r5;
    int _255 = asint(r2.z) + 1;
    r5 = (shader_in[2].zzzz * float4(cb4_m[_255].x, cb4_m[_255].y, cb4_m[_255].z, cb4_m[_255].w)) + r5;
    int _275 = asint(r2.w) + 1;
    r5 = (shader_in[2].wwww * float4(cb4_m[_275].x, cb4_m[_275].y, cb4_m[_275].z, cb4_m[_275].w)) + r5;
    float4 _303 = r4;
    _303.y = mad(r5.w, r1.w, mad(r5.z, r1.z, mad(r5.y, r1.y, r5.x * r1.x)));
    r4 = _303;
    int _311 = asint(r2.y) + 2;
    r6 = shader_in[2].yyyy * float4(cb4_m[_311].x, cb4_m[_311].y, cb4_m[_311].z, cb4_m[_311].w);
    int _330 = asint(r2.x) + 2;
    r6 = (shader_in[2].xxxx * float4(cb4_m[_330].x, cb4_m[_330].y, cb4_m[_330].z, cb4_m[_330].w)) + r6;
    int _350 = asint(r2.z) + 2;
    r6 = (shader_in[2].zzzz * float4(cb4_m[_350].x, cb4_m[_350].y, cb4_m[_350].z, cb4_m[_350].w)) + r6;
    int _370 = asint(r2.w) + 2;
    r2 = (shader_in[2].wwww * float4(cb4_m[_370].x, cb4_m[_370].y, cb4_m[_370].z, cb4_m[_370].w)) + r6;
    float4 _398 = r4;
    _398.z = mad(r2.w, r1.w, mad(r2.z, r1.z, mad(r2.y, r1.y, r2.x * r1.x)));
    r4 = _398;
    float3 _404 = r0.xxx * r4.xyz;
    r1 = float4(_404.x, _404.y, _404.z, r1.w);
    float4 _408 = r1;
    _408.w = asfloat(1065353216u);
    r1 = _408;
    float4 _419 = float4(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z, cb6_m[0].w);
    float4 _433 = r4;
    _433.x = mad(_419.w, r1.w, mad(_419.z, r1.z, mad(_419.y, r1.y, _419.x * r1.x)));
    r4 = _433;
    float4 _444 = float4(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z, cb6_m[1].w);
    float4 _458 = r4;
    _458.y = mad(_444.w, r1.w, mad(_444.z, r1.z, mad(_444.y, r1.y, _444.x * r1.x)));
    r4 = _458;
    float4 _469 = float4(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z, cb6_m[2].w);
    float4 _483 = r4;
    _483.z = mad(_469.w, r1.w, mad(_469.z, r1.z, mad(_469.y, r1.y, _469.x * r1.x)));
    r4 = _483;
    float4 _486 = r4;
    _486.w = asfloat(1065353216u);
    r4 = _486;
    float4 _497 = float4(cb0_m[0].x, cb0_m[0].y, cb0_m[0].z, cb0_m[0].w);
    float4 _511 = o0;
    _511.x = mad(_497.w, r4.w, mad(_497.z, r4.z, mad(_497.y, r4.y, _497.x * r4.x)));
    o0 = _511;
    float4 _522 = float4(cb0_m[1].x, cb0_m[1].y, cb0_m[1].z, cb0_m[1].w);
    float4 _536 = o0;
    _536.y = mad(_522.w, r4.w, mad(_522.z, r4.z, mad(_522.y, r4.y, _522.x * r4.x)));
    o0 = _536;
    float4 _547 = float4(cb0_m[2].x, cb0_m[2].y, cb0_m[2].z, cb0_m[2].w);
    float4 _561 = o0;
    _561.z = mad(_547.w, r4.w, mad(_547.z, r4.z, mad(_547.y, r4.y, _547.x * r4.x)));
    o0 = _561;
    float4 _572 = float4(cb0_m[3].x, cb0_m[3].y, cb0_m[3].z, cb0_m[3].w);
    float4 _586 = o0;
    _586.w = mad(_572.w, r4.w, mad(_572.z, r4.z, mad(_572.y, r4.y, _572.x * r4.x)));
    o0 = _586;
    float4 _602 = r1;
    _602.x = mad(r3.xyz.z, shader_in[1].xyz.z, mad(r3.xyz.y, shader_in[1].xyz.y, r3.xyz.x * shader_in[1].xyz.x));
    r1 = _602;
    float4 _618 = r1;
    _618.y = mad(r5.xyz.z, shader_in[1].xyz.z, mad(r5.xyz.y, shader_in[1].xyz.y, r5.xyz.x * shader_in[1].xyz.x));
    r1 = _618;
    float4 _634 = r1;
    _634.z = mad(r2.xyz.z, shader_in[1].xyz.z, mad(r2.xyz.y, shader_in[1].xyz.y, r2.xyz.x * shader_in[1].xyz.x));
    r1 = _634;
    float3 _640 = r0.xxx * r1.xyz;
    r0 = float4(r0.x, _640.x, _640.y, _640.z);
    float4 _656 = r1;
    _656.x = mad(r0.yzw.z, r0.yzw.z, mad(r0.yzw.y, r0.yzw.y, r0.yzw.x * r0.yzw.x));
    r1 = _656;
    float4 _661 = r1;
    _661.x = rsqrt(r1.x);
    r1 = _661;
    float3 _667 = r0.yzw * r1.xxx;
    r0 = float4(r0.x, _667.x, _667.y, _667.z);
    float3 _677 = float3(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z);
    float4 _689 = r1;
    _689.x = mad(_677.z, r0.yzw.z, mad(_677.y, r0.yzw.y, _677.x * r0.yzw.x));
    r1 = _689;
    float3 _698 = float3(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z);
    float4 _710 = r1;
    _710.y = mad(_698.z, r0.yzw.z, mad(_698.y, r0.yzw.y, _698.x * r0.yzw.x));
    r1 = _710;
    float3 _719 = float3(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z);
    float4 _731 = r1;
    _731.z = mad(_719.z, r0.yzw.z, mad(_719.y, r0.yzw.y, _719.x * r0.yzw.x));
    r1 = _731;
    float4 _746 = r0;
    _746.y = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _746;
    float4 _751 = r0;
    _751.y = rsqrt(r0.y);
    r0 = _751;
    float3 _757 = r0.yyy * r1.xyz;
    r0 = float4(r0.x, _757.x, _757.y, _757.z);
    float3 _772 = shader_in[1].yzx * (-float3(cb5_m[0].z, cb5_m[0].x, cb5_m[0].y));
    r1 = float4(_772.x, _772.y, _772.z, r1.w);
    float3 _791 = ((-float3(cb5_m[0].y, cb5_m[0].z, cb5_m[0].x)) * shader_in[1].zxy) + (-r1.xyz);
    r1 = float4(_791.x, _791.y, _791.z, r1.w);
    float4 _807 = r1;
    _807.w = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r1 = _807;
    float4 _812 = r1;
    _812.w = rsqrt(r1.w);
    r1 = _812;
    float3 _818 = r1.www * r1.xyz;
    r1 = float4(_818.x, _818.y, _818.z, r1.w);
    float3 _826 = r1.yzx * shader_in[1].zxy;
    r6 = float4(_826.x, _826.y, _826.z, r6.w);
    float3 _838 = (shader_in[1].yzx * r1.zxy) + (-r6.xyz);
    r6 = float4(_838.x, _838.y, _838.z, r6.w);
    float3 _848 = float3(cb5_m[2].x, cb5_m[2].y, cb5_m[2].z);
    float4 _860 = o2;
    _860.y = mad(_848.z, r1.xyz.z, mad(_848.y, r1.xyz.y, _848.x * r1.xyz.x));
    o2 = _860;
    float4 _875 = r1;
    _875.x = mad(r6.xyz.z, r6.xyz.z, mad(r6.xyz.y, r6.xyz.y, r6.xyz.x * r6.xyz.x));
    r1 = _875;
    float4 _880 = r1;
    _880.x = rsqrt(r1.x);
    r1 = _880;
    float3 _886 = r1.xxx * r6.xyz;
    r1 = float4(_886.x, _886.y, _886.z, r1.w);
    float4 _902 = r3;
    _902.x = mad(r3.xyz.z, r1.xyz.z, mad(r3.xyz.y, r1.xyz.y, r3.xyz.x * r1.xyz.x));
    r3 = _902;
    float4 _917 = r3;
    _917.y = mad(r5.xyz.z, r1.xyz.z, mad(r5.xyz.y, r1.xyz.y, r5.xyz.x * r1.xyz.x));
    r3 = _917;
    float4 _932 = r3;
    _932.z = mad(r2.xyz.z, r1.xyz.z, mad(r2.xyz.y, r1.xyz.y, r2.xyz.x * r1.xyz.x));
    r3 = _932;
    float3 _941 = float3(cb5_m[2].x, cb5_m[2].y, cb5_m[2].z);
    float4 _953 = o2;
    _953.x = mad(_941.z, r1.xyz.z, mad(_941.y, r1.xyz.y, _941.x * r1.xyz.x));
    o2 = _953;
    float3 _959 = r0.xxx * r3.xyz;
    r1 = float4(_959.x, _959.y, _959.z, r1.w);
    float4 _975 = r0;
    _975.x = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _975;
    float4 _980 = r0;
    _980.x = rsqrt(r0.x);
    r0 = _980;
    float3 _986 = r0.xxx * r1.xyz;
    r1 = float4(_986.x, _986.y, _986.z, r1.w);
    float3 _996 = float3(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z);
    float4 _1008 = r2;
    _1008.x = mad(_996.z, r1.xyz.z, mad(_996.y, r1.xyz.y, _996.x * r1.xyz.x));
    r2 = _1008;
    float3 _1017 = float3(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z);
    float4 _1029 = r2;
    _1029.y = mad(_1017.z, r1.xyz.z, mad(_1017.y, r1.xyz.y, _1017.x * r1.xyz.x));
    r2 = _1029;
    float3 _1038 = float3(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z);
    float4 _1050 = r2;
    _1050.z = mad(_1038.z, r1.xyz.z, mad(_1038.y, r1.xyz.y, _1038.x * r1.xyz.x));
    r2 = _1050;
    float4 _1065 = r0;
    _1065.x = mad(r2.xyz.z, r2.xyz.z, mad(r2.xyz.y, r2.xyz.y, r2.xyz.x * r2.xyz.x));
    r0 = _1065;
    float4 _1070 = r0;
    _1070.x = rsqrt(r0.x);
    r0 = _1070;
    float3 _1076 = r0.xxx * r2.xyz;
    r1 = float4(_1076.x, _1076.y, _1076.z, r1.w);
    float3 _1083 = r0.wyz * r1.yzx;
    r2 = float4(_1083.x, _1083.y, _1083.z, r2.w);
    float3 _1094 = (r0.zwy * r1.zxy) + (-r2.xyz);
    r2 = float4(_1094.x, _1094.y, _1094.z, r2.w);
    float3 _1108 = (-r4.xyz) + float3(cb1_m[0].x, cb1_m[0].y, cb1_m[0].z);
    r3 = float4(_1108.x, _1108.y, _1108.z, r3.w);
    float3 _1123 = r4.xyz + (-float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z));
    r4 = float4(_1123.x, _1123.y, _1123.z, r4.w);
    float3 _1130 = -r2.xyz;
    float3 _1140 = o1;
    _1140.y = mad(r3.xyz.z, _1130.z, mad(r3.xyz.y, _1130.y, r3.xyz.x * _1130.x));
    o1 = _1140;
    float3 _1149 = float3(cb1_m[1].x, cb1_m[1].y, cb1_m[1].z);
    float3 _1152 = -r2.xyz;
    float4 _1162 = o5;
    _1162.y = mad(_1149.z, _1152.z, mad(_1149.y, _1152.y, _1149.x * _1152.x));
    o5 = _1162;
    float3 _1177 = o1;
    _1177.z = mad(r3.xyz.z, r0.yzw.z, mad(r3.xyz.y, r0.yzw.y, r3.xyz.x * r0.yzw.x));
    o1 = _1177;
    float3 _1186 = float3(cb1_m[1].x, cb1_m[1].y, cb1_m[1].z);
    float4 _1198 = o5;
    _1198.z = mad(_1186.z, r0.yzw.z, mad(_1186.y, r0.yzw.y, _1186.x * r0.yzw.x));
    o5 = _1198;
    float3 _1213 = o1;
    _1213.x = mad(r3.xyz.z, r1.xyz.z, mad(r3.xyz.y, r1.xyz.y, r3.xyz.x * r1.xyz.x));
    o1 = _1213;
    float3 _1222 = float3(cb1_m[1].x, cb1_m[1].y, cb1_m[1].z);
    float4 _1234 = o5;
    _1234.x = mad(_1222.z, r1.xyz.z, mad(_1222.y, r1.xyz.y, _1222.x * r1.xyz.x));
    o5 = _1234;
    float3 _1243 = float3(cb5_m[2].x, cb5_m[2].y, cb5_m[2].z);
    float4 _1256 = o2;
    _1256.z = mad(_1243.z, shader_in[1].xyz.z, mad(_1243.y, shader_in[1].xyz.y, _1243.x * shader_in[1].xyz.x));
    o2 = _1256;
    float3 _1270 = shader_in[0].xyz + (-float3(cb5_m[3].x, cb5_m[3].y, cb5_m[3].z));
    r0 = float4(_1270.x, _1270.y, _1270.z, r0.w);
    float3 _1282 = float3(cb5_m[0].x, cb5_m[0].y, cb5_m[0].z);
    float4 _1292 = r1;
    _1292.x = mad(r0.xyz.z, _1282.z, mad(r0.xyz.y, _1282.y, r0.xyz.x * _1282.x));
    r1 = _1292;
    float3 _1303 = float3(cb5_m[2].x, cb5_m[2].y, cb5_m[2].z);
    float4 _1313 = r1;
    _1313.z = mad(r0.xyz.z, _1303.z, mad(r0.xyz.y, _1303.y, r0.xyz.x * _1303.x));
    r1 = _1313;
    float3 _1324 = float3(cb5_m[1].x, cb5_m[1].y, cb5_m[1].z);
    float4 _1334 = r0;
    _1334.x = mad(r0.xyz.z, _1324.z, mad(r0.xyz.y, _1324.y, r0.xyz.x * _1324.x));
    r0 = _1334;
    float4 _1343 = r0;
    _1343.x = r0.x * cb5_m[5].y;
    r0 = _1343;
    float2 _1354 = r1.xz * float2(cb5_m[5].x, cb5_m[5].z);
    r1 = float4(_1354.x, r1.y, _1354.y, r1.w);
    float4 _1359 = o2;
    _1359.w = r1.z;
    o2 = _1359;
    o3 = float4(cb5_m[6].x, cb5_m[6].y, cb5_m[6].z, cb5_m[6].w);
    o4 = float4(cb5_m[4].x, cb5_m[4].y, cb5_m[4].z, cb5_m[4].w);
    float4 _1390 = r0;
    _1390.y = r4.y * cb0_m[13].x;
    r0 = _1390;
    float4 _1397 = r0;
    _1397.z = r0.y * asfloat(3216550459u);
    r0 = _1397;
    float4 _1402 = r0;
    _1402.z = exp2(r0.z);
    r0 = _1402;
    float4 _1409 = r0;
    _1409.z = (-r0.z) + asfloat(1065353216u);
    r0 = _1409;
    float4 _1416 = r0;
    _1416.y = r0.z / r0.y;
    r0 = _1416;
    float4 _1428 = r0;
    _1428.z = asfloat((asfloat(1008981770u) < abs(r4.y)) ? 4294967295u : 0u);
    r0 = _1428;
    float4 _1443 = r0;
    _1443.w = mad(r4.xyz.z, r4.xyz.z, mad(r4.xyz.y, r4.xyz.y, r4.xyz.x * r4.xyz.x));
    r0 = _1443;
    float4 _1448 = r0;
    _1448.w = sqrt(r0.w);
    r0 = _1448;
    float4 _1456 = r0;
    _1456.w = r0.w * cb0_m[13].y;
    r0 = _1456;
    float4 _1466 = r0;
    _1466.y = (asuint(r0.z) != 0u) ? r0.y : asfloat(1065353216u);
    r0 = _1466;
    float4 _1478 = r0;
    _1478.y = (r0.y * r0.w) + (-cb0_m[13].w);
    r0 = _1478;
    float4 _1484 = r0;
    _1484.y = exp2(-r0.y);
    r0 = _1484;
    float4 _1490 = r0;
    _1490.y = min(r0.y, asfloat(1065353216u));
    r0 = _1490;
    float4 _1497 = o5;
    _1497.w = (-r0.y) + asfloat(1065353216u);
    o5 = _1497;
    float4 _1501 = r0;
    _1501.y = asfloat(3212836864u);
    r0 = _1501;
    float4 _1508 = r1;
    _1508.y = r0.x * r0.y;
    r1 = _1508;
    float2 _1516 = r1.xy + asfloat(uint2(1056964608u, 1056964608u));
    o6 = float4(_1516.x, _1516.y, o6.z, o6.w);
    float2 _1522 = cb5_m[5].w.xx;
    o6 = float4(o6.x, o6.y, _1522.x, _1522.y);
}

void vert_main()
{
    shader_in[0] = float4(v0.x, v0.y, v0.z, shader_in[0].w);
    shader_in[1] = float4(v1.x, v1.y, v1.z, shader_in[1].w);
    shader_in[2] = v2;
    shader_in[3] = asfloat(v3);
    vs_main();
    gl_Position = o0;
    gl_PointSize = 1.0f;
    gl_Position.x = gl_Position.x - gl_HalfPixel.x * gl_Position.w;
    gl_Position.y = gl_Position.y + gl_HalfPixel.y * gl_Position.w;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    v0 = stage_input.v0;
    v1 = stage_input.v1;
    v2 = stage_input.v2;
    v3 = stage_input.v3;
    vert_main();
    SPIRV_Cross_Output stage_output;
    stage_output.gl_Position = gl_Position;
    stage_output.gl_PointSize = gl_PointSize;
    return stage_output;
}
