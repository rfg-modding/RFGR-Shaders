cbuffer cb0_t : register(b160)
{
    float4 cb0_m[14] : packoffset(c0);
};

cbuffer cb4_t : register(b164)
{
    float4 cb4_m[4096] : packoffset(c0);
};

cbuffer cb6_t : register(b166)
{
    float4 cb6_m[3] : packoffset(c0);
};

cbuffer cb2_t : register(b162)
{
    float4 cb2_m[4] : packoffset(c0);
};

uniform float4 gl_HalfPixel;

static float4 gl_Position;
static float gl_PointSize;
static float3 v0;
static float3 v1;
static float4 v2;
static float4 v3;
static float4 v4;
static int4 v5;

struct SPIRV_Cross_Input
{
    float3 v0 : TEXCOORD0;
    float3 v1 : TEXCOORD1;
    float4 v2 : TEXCOORD2;
    float4 v3 : TEXCOORD3;
    float4 v4 : TEXCOORD4;
    float4 v5 : TEXCOORD5;
};

struct SPIRV_Cross_Output
{
    float4 gl_Position : POSITION;
    float gl_PointSize : PSIZE;
};

static float4 shader_in[6];
static float4 o0;
static float4 o1;
static float4 r0;
static float4 r1;
static float4 r2;
static float4 r3;
static float4 r4;
static float4 r5;
static float4 r6;

void vs_main()
{
    float4 _59 = r0;
    _59.x = shader_in[4].y + shader_in[4].x;
    r0 = _59;
    float4 _67 = r0;
    _67.x = r0.x + shader_in[4].z;
    r0 = _67;
    float4 _75 = r0;
    _75.x = r0.x + shader_in[4].w;
    r0 = _75;
    float4 _82 = r0;
    _82.x = asfloat(1065353216u) / r0.x;
    r0 = _82;
    float3 _97 = (shader_in[2].xyz * asfloat(uint3(1082130432u, 1082130432u, 1082130432u))) + shader_in[0].xyz;
    r1 = float4(_97.x, _97.y, _97.z, r1.w);
    float4 _102 = r1;
    _102.w = asfloat(1065353216u);
    r1 = _102;
    r2 = asfloat(asint(shader_in[5]) * int4(uint4(3u, 3u, 3u, 3u)));
    int _119 = asint(r2.y);
    r3 = shader_in[4].yyyy * float4(cb4_m[_119].x, cb4_m[_119].y, cb4_m[_119].z, cb4_m[_119].w);
    int _142 = asint(r2.x);
    r3 = (shader_in[4].xxxx * float4(cb4_m[_142].x, cb4_m[_142].y, cb4_m[_142].z, cb4_m[_142].w)) + r3;
    int _161 = asint(r2.z);
    r3 = (shader_in[4].zzzz * float4(cb4_m[_161].x, cb4_m[_161].y, cb4_m[_161].z, cb4_m[_161].w)) + r3;
    int _180 = asint(r2.w);
    r3 = (shader_in[4].wwww * float4(cb4_m[_180].x, cb4_m[_180].y, cb4_m[_180].z, cb4_m[_180].w)) + r3;
    float4 _209 = r4;
    _209.x = mad(r3.w, r1.w, mad(r3.z, r1.z, mad(r3.y, r1.y, r3.x * r1.x)));
    r4 = _209;
    int _218 = asint(r2.y) + 1;
    r5 = shader_in[4].yyyy * float4(cb4_m[_218].x, cb4_m[_218].y, cb4_m[_218].z, cb4_m[_218].w);
    int _237 = asint(r2.x) + 1;
    r5 = (shader_in[4].xxxx * float4(cb4_m[_237].x, cb4_m[_237].y, cb4_m[_237].z, cb4_m[_237].w)) + r5;
    int _257 = asint(r2.z) + 1;
    r5 = (shader_in[4].zzzz * float4(cb4_m[_257].x, cb4_m[_257].y, cb4_m[_257].z, cb4_m[_257].w)) + r5;
    int _277 = asint(r2.w) + 1;
    r5 = (shader_in[4].wwww * float4(cb4_m[_277].x, cb4_m[_277].y, cb4_m[_277].z, cb4_m[_277].w)) + r5;
    float4 _305 = r4;
    _305.y = mad(r5.w, r1.w, mad(r5.z, r1.z, mad(r5.y, r1.y, r5.x * r1.x)));
    r4 = _305;
    int _313 = asint(r2.y) + 2;
    r6 = shader_in[4].yyyy * float4(cb4_m[_313].x, cb4_m[_313].y, cb4_m[_313].z, cb4_m[_313].w);
    int _332 = asint(r2.x) + 2;
    r6 = (shader_in[4].xxxx * float4(cb4_m[_332].x, cb4_m[_332].y, cb4_m[_332].z, cb4_m[_332].w)) + r6;
    int _352 = asint(r2.z) + 2;
    r6 = (shader_in[4].zzzz * float4(cb4_m[_352].x, cb4_m[_352].y, cb4_m[_352].z, cb4_m[_352].w)) + r6;
    int _372 = asint(r2.w) + 2;
    r2 = (shader_in[4].wwww * float4(cb4_m[_372].x, cb4_m[_372].y, cb4_m[_372].z, cb4_m[_372].w)) + r6;
    float4 _400 = r4;
    _400.z = mad(r2.w, r1.w, mad(r2.z, r1.z, mad(r2.y, r1.y, r2.x * r1.x)));
    r4 = _400;
    float3 _406 = r0.xxx * r4.xyz;
    r1 = float4(_406.x, _406.y, _406.z, r1.w);
    float4 _410 = r1;
    _410.w = asfloat(1065353216u);
    r1 = _410;
    float4 _421 = float4(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z, cb6_m[0].w);
    float4 _435 = r4;
    _435.x = mad(_421.w, r1.w, mad(_421.z, r1.z, mad(_421.y, r1.y, _421.x * r1.x)));
    r4 = _435;
    float4 _446 = float4(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z, cb6_m[1].w);
    float4 _460 = r4;
    _460.y = mad(_446.w, r1.w, mad(_446.z, r1.z, mad(_446.y, r1.y, _446.x * r1.x)));
    r4 = _460;
    float4 _471 = float4(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z, cb6_m[2].w);
    float4 _485 = r4;
    _485.z = mad(_471.w, r1.w, mad(_471.z, r1.z, mad(_471.y, r1.y, _471.x * r1.x)));
    r4 = _485;
    float4 _488 = r4;
    _488.w = asfloat(1065353216u);
    r4 = _488;
    float4 _499 = float4(cb0_m[0].x, cb0_m[0].y, cb0_m[0].z, cb0_m[0].w);
    float4 _513 = o0;
    _513.x = mad(_499.w, r4.w, mad(_499.z, r4.z, mad(_499.y, r4.y, _499.x * r4.x)));
    o0 = _513;
    float4 _524 = float4(cb0_m[1].x, cb0_m[1].y, cb0_m[1].z, cb0_m[1].w);
    float4 _538 = o0;
    _538.y = mad(_524.w, r4.w, mad(_524.z, r4.z, mad(_524.y, r4.y, _524.x * r4.x)));
    o0 = _538;
    float4 _549 = float4(cb0_m[2].x, cb0_m[2].y, cb0_m[2].z, cb0_m[2].w);
    float4 _563 = o0;
    _563.z = mad(_549.w, r4.w, mad(_549.z, r4.z, mad(_549.y, r4.y, _549.x * r4.x)));
    o0 = _563;
    float4 _575 = float4(cb0_m[3].x, cb0_m[3].y, cb0_m[3].z, cb0_m[3].w);
    float4 _589 = o0;
    _589.w = mad(_575.w, r4.w, mad(_575.z, r4.z, mad(_575.y, r4.y, _575.x * r4.x)));
    o0 = _589;
    float3 _601 = (shader_in[1].xyz * asfloat(uint3(1073741824u, 1073741824u, 1073741824u))) + asfloat(uint3(3212836864u, 3212836864u, 3212836864u));
    r0 = float4(r0.x, _601.x, _601.y, _601.z);
    float3 _610 = (shader_in[3].xyz * asfloat(uint3(1073741824u, 1073741824u, 1073741824u))) + asfloat(uint3(3212836864u, 3212836864u, 3212836864u));
    r1 = float4(_610.x, _610.y, _610.z, r1.w);
    float3 _619 = (r1.xyz * asfloat(uint3(1073741824u, 1073741824u, 1073741824u))) + r0.yzw;
    r0 = float4(r0.x, _619.x, _619.y, _619.z);
    float4 _635 = r1;
    _635.x = mad(r0.yzw.z, r0.yzw.z, mad(r0.yzw.y, r0.yzw.y, r0.yzw.x * r0.yzw.x));
    r1 = _635;
    float4 _640 = r1;
    _640.x = rsqrt(r1.x);
    r1 = _640;
    float3 _646 = r0.yzw * r1.xxx;
    r0 = float4(r0.x, _646.x, _646.y, _646.z);
    float4 _662 = r1;
    _662.x = mad(r3.xyz.z, r0.yzw.z, mad(r3.xyz.y, r0.yzw.y, r3.xyz.x * r0.yzw.x));
    r1 = _662;
    float4 _677 = r1;
    _677.y = mad(r5.xyz.z, r0.yzw.z, mad(r5.xyz.y, r0.yzw.y, r5.xyz.x * r0.yzw.x));
    r1 = _677;
    float4 _692 = r1;
    _692.z = mad(r2.xyz.z, r0.yzw.z, mad(r2.xyz.y, r0.yzw.y, r2.xyz.x * r0.yzw.x));
    r1 = _692;
    float3 _698 = r0.xxx * r1.xyz;
    r0 = float4(_698.x, _698.y, _698.z, r0.w);
    float4 _714 = r0;
    _714.w = mad(r0.xyz.z, r0.xyz.z, mad(r0.xyz.y, r0.xyz.y, r0.xyz.x * r0.xyz.x));
    r0 = _714;
    float4 _719 = r0;
    _719.w = rsqrt(r0.w);
    r0 = _719;
    float3 _725 = r0.www * r0.xyz;
    r0 = float4(_725.x, _725.y, _725.z, r0.w);
    float3 _735 = float3(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z);
    float4 _747 = r1;
    _747.x = mad(_735.z, r0.xyz.z, mad(_735.y, r0.xyz.y, _735.x * r0.xyz.x));
    r1 = _747;
    float3 _756 = float3(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z);
    float4 _768 = r1;
    _768.y = mad(_756.z, r0.xyz.z, mad(_756.y, r0.xyz.y, _756.x * r0.xyz.x));
    r1 = _768;
    float3 _777 = float3(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z);
    float4 _789 = r1;
    _789.z = mad(_777.z, r0.xyz.z, mad(_777.y, r0.xyz.y, _777.x * r0.xyz.x));
    r1 = _789;
    float4 _804 = r0;
    _804.x = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _804;
    float4 _809 = r0;
    _809.x = rsqrt(r0.x);
    r0 = _809;
    float3 _815 = r0.xxx * r1.xyz;
    r0 = float4(_815.x, _815.y, _815.z, r0.w);
    float3 _830 = (-r4.xyz) + float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z);
    r1 = float4(_830.x, _830.y, _830.z, r1.w);
    float3 _844 = r4.xyz + (-float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z));
    r2 = float4(_844.x, _844.y, _844.z, r2.w);
    float4 _860 = r0;
    _860.w = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _860;
    float4 _865 = r0;
    _865.w = rsqrt(r0.w);
    r0 = _865;
    float3 _871 = r0.www * r1.xyz;
    r1 = float4(_871.x, _871.y, _871.z, r1.w);
    float3 _878 = r1.xyz * asfloat(uint3(0u, 1065353216u, 0u));
    r3 = float4(_878.x, _878.y, _878.z, r3.w);
    float3 _889 = (r1.yzx * asfloat(uint3(0u, 0u, 1065353216u))) + (-r3.xyz);
    r3 = float4(_889.x, _889.y, _889.z, r3.w);
    float4 _903 = r0;
    _903.w = mad(r3.yz.y, r3.yz.y, r3.yz.x * r3.yz.x);
    r0 = _903;
    float4 _908 = r0;
    _908.w = rsqrt(r0.w);
    r0 = _908;
    float3 _914 = r0.www * r3.xyz;
    r3 = float4(_914.x, _914.y, _914.z, r3.w);
    float3 _921 = r1.yzx * r3.xyz;
    r4 = float4(_921.x, _921.y, _921.z, r4.w);
    float3 _932 = (r3.zxy * r1.zxy) + (-r4.xyz);
    r3 = float4(_932.x, _932.y, _932.z, r3.w);
    float4 _948 = r0;
    _948.w = mad(r1.xyz.z, r0.xyz.z, mad(r1.xyz.y, r0.xyz.y, r1.xyz.x * r0.xyz.x));
    r0 = _948;
    float4 _954 = r0;
    _954.w = max(r0.w, asfloat(0u));
    r0 = _954;
    float4 _969 = r1;
    _969.x = mad(r3.xyz.z, r3.xyz.z, mad(r3.xyz.y, r3.xyz.y, r3.xyz.x * r3.xyz.x));
    r1 = _969;
    float4 _974 = r1;
    _974.x = rsqrt(r1.x);
    r1 = _974;
    float3 _980 = r1.xxx * r3.xyz;
    r1 = float4(_980.x, _980.y, _980.z, r1.w);
    float4 _996 = r0;
    _996.x = mad(r1.xyz.z, r0.xyz.z, mad(r1.xyz.y, r0.xyz.y, r1.xyz.x * r0.xyz.x));
    r0 = _996;
    float4 _1005 = r0;
    _1005.x = (r0.x * asfloat(1056964608u)) + asfloat(1056964608u);
    r0 = _1005;
    float4 _1013 = r0;
    _1013.y = r0.x * cb2_m[2].w;
    r0 = _1013;
    float4 _1021 = r0;
    _1021.x = r0.w * cb2_m[2].z;
    r0 = _1021;
    float4 _1028 = r0;
    _1028.z = (-r0.w) + asfloat(1065353216u);
    r0 = _1028;
    float4 _1033 = r0;
    _1033.z = log2(r0.z);
    r0 = _1033;
    float2 _1043 = r0.zz * float2(cb2_m[2].x, cb2_m[2].y);
    r0 = float4(r0.x, r0.y, _1043.x, _1043.y);
    float2 _1048 = exp2(r0.zw);
    r0 = float4(r0.x, r0.y, _1048.x, _1048.y);
    float2 _1065 = (cb0_m[12].x.xx * float2(cb2_m[3].x, cb2_m[3].y)) + r0.xy;
    o1 = float4(_1065.x, _1065.y, o1.z, o1.w);
    float4 _1074 = r0;
    _1074.x = (-r0.z) + r0.w;
    r0 = _1074;
    float4 _1082 = r0;
    _1082.y = cb2_m[3].z + asfloat(1008981770u);
    r0 = _1082;
    float4 _1088 = r0;
    _1088.y = asfloat(1073741824u) / r0.y;
    r0 = _1088;
    float4 _1096 = r0;
    _1096.y = r0.y * cb0_m[12].z;
    r0 = _1096;
    float4 _1102 = r0;
    _1102.y = cos(r0.yyyy.y);
    r0 = _1102;
    float4 _1108 = r0;
    _1108.y = r0.y + asfloat(1065353216u);
    r0 = _1108;
    float4 _1114 = r0;
    _1114.y = r0.y * asfloat(1056964608u);
    r0 = _1114;
    float4 _1124 = o1;
    _1124.z = (r0.y * r0.x) + r0.z;
    o1 = _1124;
    float4 _1133 = r0;
    _1133.x = r2.y * cb0_m[13].x;
    r0 = _1133;
    float4 _1140 = r0;
    _1140.y = r0.x * asfloat(3216550459u);
    r0 = _1140;
    float4 _1145 = r0;
    _1145.y = exp2(r0.y);
    r0 = _1145;
    float4 _1152 = r0;
    _1152.y = (-r0.y) + asfloat(1065353216u);
    r0 = _1152;
    float4 _1159 = r0;
    _1159.x = r0.y / r0.x;
    r0 = _1159;
    float4 _1170 = r0;
    _1170.y = asfloat((asfloat(1008981770u) < abs(r2.y)) ? 4294967295u : 0u);
    r0 = _1170;
    float4 _1185 = r0;
    _1185.z = mad(r2.xyz.z, r2.xyz.z, mad(r2.xyz.y, r2.xyz.y, r2.xyz.x * r2.xyz.x));
    r0 = _1185;
    float4 _1190 = r0;
    _1190.z = sqrt(r0.z);
    r0 = _1190;
    float4 _1198 = r0;
    _1198.z = r0.z * cb0_m[13].y;
    r0 = _1198;
    float4 _1208 = r0;
    _1208.x = (asuint(r0.y) != 0u) ? r0.x : asfloat(1065353216u);
    r0 = _1208;
    float4 _1220 = r0;
    _1220.x = (r0.x * r0.z) + (-cb0_m[13].w);
    r0 = _1220;
    float4 _1226 = r0;
    _1226.x = exp2(-r0.x);
    r0 = _1226;
    float4 _1232 = r0;
    _1232.x = min(r0.x, asfloat(1065353216u));
    r0 = _1232;
    float4 _1239 = o1;
    _1239.w = (-r0.x) + asfloat(1065353216u);
    o1 = _1239;
}

void vert_main()
{
    shader_in[0] = float4(v0.x, v0.y, v0.z, shader_in[0].w);
    shader_in[1] = float4(v1.x, v1.y, v1.z, shader_in[1].w);
    shader_in[2] = v2;
    shader_in[3] = v3;
    shader_in[4] = v4;
    shader_in[5] = asfloat(v5);
    vs_main();
    gl_Position = o0;
    gl_PointSize = 1.0f;
    gl_Position.x = gl_Position.x - gl_HalfPixel.x * gl_Position.w;
    gl_Position.y = gl_Position.y + gl_HalfPixel.y * gl_Position.w;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    v0 = stage_input.v0;
    v1 = stage_input.v1;
    v2 = stage_input.v2;
    v3 = stage_input.v3;
    v4 = stage_input.v4;
    v5 = stage_input.v5;
    vert_main();
    SPIRV_Cross_Output stage_output;
    stage_output.gl_Position = gl_Position;
    stage_output.gl_PointSize = gl_PointSize;
    return stage_output;
}
