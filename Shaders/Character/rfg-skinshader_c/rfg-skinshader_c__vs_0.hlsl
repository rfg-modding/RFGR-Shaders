cbuffer cb0_t : register(b160)
{
    float4 cb0_m[14] : packoffset(c0);
};

cbuffer cb1_t : register(b161)
{
    float4 cb1_m[1] : packoffset(c0);
};

cbuffer cb4_t : register(b164)
{
    float4 cb4_m[4096] : packoffset(c0);
};

cbuffer cb6_t : register(b166)
{
    float4 cb6_m[3] : packoffset(c0);
};

uniform float4 gl_HalfPixel;

static float4 gl_Position;
static float gl_PointSize;
static float3 v0;
static int2 v1;
static float3 v2;
static float4 v3;
static float4 v4;
static int4 v5;

struct SPIRV_Cross_Input
{
    float3 v0 : TEXCOORD0;
    float2 v1 : TEXCOORD1;
    float3 v2 : TEXCOORD2;
    float4 v3 : TEXCOORD3;
    float4 v4 : TEXCOORD4;
    float4 v5 : TEXCOORD5;
};

struct SPIRV_Cross_Output
{
    float4 gl_Position : POSITION;
    float gl_PointSize : PSIZE;
};

static float4 shader_in[6];
static float4 o0;
static float2 o1;
static float3 o2;
static float3 o3;
static float4 o4;
static float4 r0;
static float4 r1;
static float4 r2;
static float4 r3;
static float4 r4;
static float4 r5;
static float4 r6;

void vs_main()
{
    float4 _67 = r0;
    _67.x = shader_in[4].y + shader_in[4].x;
    r0 = _67;
    float4 _75 = r0;
    _75.x = r0.x + shader_in[4].z;
    r0 = _75;
    float4 _83 = r0;
    _83.x = r0.x + shader_in[4].w;
    r0 = _83;
    float4 _90 = r0;
    _90.x = asfloat(1065353216u) / r0.x;
    r0 = _90;
    r1 = float4(shader_in[0].xyz.x, shader_in[0].xyz.y, shader_in[0].xyz.z, r1.w);
    float4 _100 = r1;
    _100.w = asfloat(1065353216u);
    r1 = _100;
    r2 = asfloat(asint(shader_in[5]) * int4(uint4(3u, 3u, 3u, 3u)));
    int _117 = asint(r2.y);
    r3 = shader_in[4].yyyy * float4(cb4_m[_117].x, cb4_m[_117].y, cb4_m[_117].z, cb4_m[_117].w);
    int _139 = asint(r2.x);
    r3 = (shader_in[4].xxxx * float4(cb4_m[_139].x, cb4_m[_139].y, cb4_m[_139].z, cb4_m[_139].w)) + r3;
    int _158 = asint(r2.z);
    r3 = (shader_in[4].zzzz * float4(cb4_m[_158].x, cb4_m[_158].y, cb4_m[_158].z, cb4_m[_158].w)) + r3;
    int _177 = asint(r2.w);
    r3 = (shader_in[4].wwww * float4(cb4_m[_177].x, cb4_m[_177].y, cb4_m[_177].z, cb4_m[_177].w)) + r3;
    float4 _206 = r4;
    _206.x = mad(r3.w, r1.w, mad(r3.z, r1.z, mad(r3.y, r1.y, r3.x * r1.x)));
    r4 = _206;
    int _215 = asint(r2.y) + 1;
    r5 = shader_in[4].yyyy * float4(cb4_m[_215].x, cb4_m[_215].y, cb4_m[_215].z, cb4_m[_215].w);
    int _234 = asint(r2.x) + 1;
    r5 = (shader_in[4].xxxx * float4(cb4_m[_234].x, cb4_m[_234].y, cb4_m[_234].z, cb4_m[_234].w)) + r5;
    int _254 = asint(r2.z) + 1;
    r5 = (shader_in[4].zzzz * float4(cb4_m[_254].x, cb4_m[_254].y, cb4_m[_254].z, cb4_m[_254].w)) + r5;
    int _274 = asint(r2.w) + 1;
    r5 = (shader_in[4].wwww * float4(cb4_m[_274].x, cb4_m[_274].y, cb4_m[_274].z, cb4_m[_274].w)) + r5;
    float4 _302 = r4;
    _302.y = mad(r5.w, r1.w, mad(r5.z, r1.z, mad(r5.y, r1.y, r5.x * r1.x)));
    r4 = _302;
    int _311 = asint(r2.y) + 2;
    r6 = shader_in[4].yyyy * float4(cb4_m[_311].x, cb4_m[_311].y, cb4_m[_311].z, cb4_m[_311].w);
    int _330 = asint(r2.x) + 2;
    r6 = (shader_in[4].xxxx * float4(cb4_m[_330].x, cb4_m[_330].y, cb4_m[_330].z, cb4_m[_330].w)) + r6;
    int _350 = asint(r2.z) + 2;
    r6 = (shader_in[4].zzzz * float4(cb4_m[_350].x, cb4_m[_350].y, cb4_m[_350].z, cb4_m[_350].w)) + r6;
    int _370 = asint(r2.w) + 2;
    r2 = (shader_in[4].wwww * float4(cb4_m[_370].x, cb4_m[_370].y, cb4_m[_370].z, cb4_m[_370].w)) + r6;
    float4 _398 = r4;
    _398.z = mad(r2.w, r1.w, mad(r2.z, r1.z, mad(r2.y, r1.y, r2.x * r1.x)));
    r4 = _398;
    float3 _404 = r0.xxx * r4.xyz;
    r1 = float4(_404.x, _404.y, _404.z, r1.w);
    float4 _408 = r1;
    _408.w = asfloat(1065353216u);
    r1 = _408;
    float4 _419 = float4(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z, cb6_m[0].w);
    float4 _433 = r4;
    _433.x = mad(_419.w, r1.w, mad(_419.z, r1.z, mad(_419.y, r1.y, _419.x * r1.x)));
    r4 = _433;
    float4 _444 = float4(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z, cb6_m[1].w);
    float4 _458 = r4;
    _458.y = mad(_444.w, r1.w, mad(_444.z, r1.z, mad(_444.y, r1.y, _444.x * r1.x)));
    r4 = _458;
    float4 _469 = float4(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z, cb6_m[2].w);
    float4 _483 = r4;
    _483.z = mad(_469.w, r1.w, mad(_469.z, r1.z, mad(_469.y, r1.y, _469.x * r1.x)));
    r4 = _483;
    float4 _486 = r4;
    _486.w = asfloat(1065353216u);
    r4 = _486;
    float4 _497 = float4(cb0_m[0].x, cb0_m[0].y, cb0_m[0].z, cb0_m[0].w);
    float4 _511 = o0;
    _511.x = mad(_497.w, r4.w, mad(_497.z, r4.z, mad(_497.y, r4.y, _497.x * r4.x)));
    o0 = _511;
    float4 _522 = float4(cb0_m[1].x, cb0_m[1].y, cb0_m[1].z, cb0_m[1].w);
    float4 _536 = o0;
    _536.y = mad(_522.w, r4.w, mad(_522.z, r4.z, mad(_522.y, r4.y, _522.x * r4.x)));
    o0 = _536;
    float4 _547 = float4(cb0_m[2].x, cb0_m[2].y, cb0_m[2].z, cb0_m[2].w);
    float4 _561 = o0;
    _561.z = mad(_547.w, r4.w, mad(_547.z, r4.z, mad(_547.y, r4.y, _547.x * r4.x)));
    o0 = _561;
    float4 _573 = float4(cb0_m[3].x, cb0_m[3].y, cb0_m[3].z, cb0_m[3].w);
    float4 _587 = o0;
    _587.w = mad(_573.w, r4.w, mad(_573.z, r4.z, mad(_573.y, r4.y, _573.x * r4.x)));
    o0 = _587;
    float2 _593 = float2(asint(shader_in[1].xy));
    r0 = float4(r0.x, _593.x, _593.y, r0.w);
    o1 = r0.yz * asfloat(uint2(981467136u, 981467136u));
    float3 _614 = (shader_in[2].xyz * asfloat(uint3(1073741824u, 1073741824u, 1073741824u))) + asfloat(uint3(3212836864u, 3212836864u, 3212836864u));
    r0 = float4(r0.x, _614.x, _614.y, _614.z);
    float4 _630 = r1;
    _630.x = mad(r3.xyz.z, r0.yzw.z, mad(r3.xyz.y, r0.yzw.y, r3.xyz.x * r0.yzw.x));
    r1 = _630;
    float4 _645 = r1;
    _645.y = mad(r5.xyz.z, r0.yzw.z, mad(r5.xyz.y, r0.yzw.y, r5.xyz.x * r0.yzw.x));
    r1 = _645;
    float4 _660 = r1;
    _660.z = mad(r2.xyz.z, r0.yzw.z, mad(r2.xyz.y, r0.yzw.y, r2.xyz.x * r0.yzw.x));
    r1 = _660;
    float3 _666 = r0.xxx * r1.xyz;
    r0 = float4(r0.x, _666.x, _666.y, _666.z);
    float4 _682 = r1;
    _682.x = mad(r0.yzw.z, r0.yzw.z, mad(r0.yzw.y, r0.yzw.y, r0.yzw.x * r0.yzw.x));
    r1 = _682;
    float4 _687 = r1;
    _687.x = rsqrt(r1.x);
    r1 = _687;
    float3 _693 = r0.yzw * r1.xxx;
    r0 = float4(r0.x, _693.x, _693.y, _693.z);
    float3 _703 = float3(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z);
    float4 _715 = r1;
    _715.x = mad(_703.z, r0.yzw.z, mad(_703.y, r0.yzw.y, _703.x * r0.yzw.x));
    r1 = _715;
    float3 _724 = float3(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z);
    float4 _736 = r1;
    _736.y = mad(_724.z, r0.yzw.z, mad(_724.y, r0.yzw.y, _724.x * r0.yzw.x));
    r1 = _736;
    float3 _745 = float3(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z);
    float4 _757 = r1;
    _757.z = mad(_745.z, r0.yzw.z, mad(_745.y, r0.yzw.y, _745.x * r0.yzw.x));
    r1 = _757;
    float4 _772 = r0;
    _772.y = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _772;
    float4 _777 = r0;
    _777.y = rsqrt(r0.y);
    r0 = _777;
    float3 _783 = r0.yyy * r1.xyz;
    r0 = float4(r0.x, _783.x, _783.y, _783.z);
    r1 = (shader_in[3] * asfloat(uint4(1073741824u, 1073741824u, 1073741824u, 1073741824u))) + asfloat(uint4(3212836864u, 3212836864u, 3212836864u, 3212836864u));
    float4 _807 = r3;
    _807.x = mad(r3.xyz.z, r1.xyz.z, mad(r3.xyz.y, r1.xyz.y, r3.xyz.x * r1.xyz.x));
    r3 = _807;
    float4 _822 = r3;
    _822.y = mad(r5.xyz.z, r1.xyz.z, mad(r5.xyz.y, r1.xyz.y, r5.xyz.x * r1.xyz.x));
    r3 = _822;
    float4 _837 = r3;
    _837.z = mad(r2.xyz.z, r1.xyz.z, mad(r2.xyz.y, r1.xyz.y, r2.xyz.x * r1.xyz.x));
    r3 = _837;
    float3 _843 = r0.xxx * r3.xyz;
    r1 = float4(_843.x, _843.y, _843.z, r1.w);
    float4 _859 = r0;
    _859.x = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _859;
    float4 _864 = r0;
    _864.x = rsqrt(r0.x);
    r0 = _864;
    float3 _870 = r0.xxx * r1.xyz;
    r1 = float4(_870.x, _870.y, _870.z, r1.w);
    float3 _880 = float3(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z);
    float4 _892 = r2;
    _892.x = mad(_880.z, r1.xyz.z, mad(_880.y, r1.xyz.y, _880.x * r1.xyz.x));
    r2 = _892;
    float3 _901 = float3(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z);
    float4 _913 = r2;
    _913.y = mad(_901.z, r1.xyz.z, mad(_901.y, r1.xyz.y, _901.x * r1.xyz.x));
    r2 = _913;
    float3 _922 = float3(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z);
    float4 _934 = r2;
    _934.z = mad(_922.z, r1.xyz.z, mad(_922.y, r1.xyz.y, _922.x * r1.xyz.x));
    r2 = _934;
    float4 _949 = r0;
    _949.x = mad(r2.xyz.z, r2.xyz.z, mad(r2.xyz.y, r2.xyz.y, r2.xyz.x * r2.xyz.x));
    r0 = _949;
    float4 _954 = r0;
    _954.x = rsqrt(r0.x);
    r0 = _954;
    float3 _960 = r0.xxx * r2.xyz;
    r1 = float4(_960.x, _960.y, _960.z, r1.w);
    float3 _967 = r0.wyz * r1.yzx;
    r2 = float4(_967.x, _967.y, _967.z, r2.w);
    float3 _978 = (r0.zwy * r1.zxy) + (-r2.xyz);
    r2 = float4(_978.x, _978.y, _978.z, r2.w);
    float3 _985 = r1.www * r2.xyz;
    r2 = float4(_985.x, _985.y, _985.z, r2.w);
    float3 _995 = float3(cb1_m[0].x, cb1_m[0].y, cb1_m[0].z);
    float3 _1007 = o2;
    _1007.y = mad(_995.z, r2.xyz.z, mad(_995.y, r2.xyz.y, _995.x * r2.xyz.x));
    o2 = _1007;
    float3 _1016 = float3(cb1_m[0].x, cb1_m[0].y, cb1_m[0].z);
    float3 _1028 = o2;
    _1028.z = mad(_1016.z, r0.yzw.z, mad(_1016.y, r0.yzw.y, _1016.x * r0.yzw.x));
    o2 = _1028;
    float3 _1037 = float3(cb1_m[0].x, cb1_m[0].y, cb1_m[0].z);
    float3 _1049 = o2;
    _1049.x = mad(_1037.z, r1.xyz.z, mad(_1037.y, r1.xyz.y, _1037.x * r1.xyz.x));
    o2 = _1049;
    float3 _1063 = (-r4.xyz) + float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z);
    r3 = float4(_1063.x, _1063.y, _1063.z, r3.w);
    float3 _1077 = r4.xyz + (-float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z));
    r4 = float4(_1077.x, _1077.y, _1077.z, r4.w);
    float3 _1093 = o3;
    _1093.x = mad(r3.xyz.z, r1.xyz.z, mad(r3.xyz.y, r1.xyz.y, r3.xyz.x * r1.xyz.x));
    o3 = _1093;
    float4 _1097 = o4;
    _1097.x = r1.y;
    o4 = _1097;
    float3 _1112 = o3;
    _1112.z = mad(r3.xyz.z, r0.yzw.z, mad(r3.xyz.y, r0.yzw.y, r3.xyz.x * r0.yzw.x));
    o3 = _1112;
    float4 _1116 = o4;
    _1116.z = r0.z;
    o4 = _1116;
    float3 _1131 = o3;
    _1131.y = mad(r3.xyz.z, r2.xyz.z, mad(r3.xyz.y, r2.xyz.y, r3.xyz.x * r2.xyz.x));
    o3 = _1131;
    float4 _1135 = o4;
    _1135.y = r2.y;
    o4 = _1135;
    float4 _1144 = r0;
    _1144.x = r4.y * cb0_m[13].x;
    r0 = _1144;
    float4 _1151 = r0;
    _1151.y = r0.x * asfloat(3216550459u);
    r0 = _1151;
    float4 _1156 = r0;
    _1156.y = exp2(r0.y);
    r0 = _1156;
    float4 _1163 = r0;
    _1163.y = (-r0.y) + asfloat(1065353216u);
    r0 = _1163;
    float4 _1170 = r0;
    _1170.x = r0.y / r0.x;
    r0 = _1170;
    float4 _1182 = r0;
    _1182.y = asfloat((asfloat(1008981770u) < abs(r4.y)) ? 4294967295u : 0u);
    r0 = _1182;
    float4 _1197 = r0;
    _1197.z = mad(r4.xyz.z, r4.xyz.z, mad(r4.xyz.y, r4.xyz.y, r4.xyz.x * r4.xyz.x));
    r0 = _1197;
    float4 _1202 = r0;
    _1202.z = sqrt(r0.z);
    r0 = _1202;
    float4 _1210 = r0;
    _1210.z = r0.z * cb0_m[13].y;
    r0 = _1210;
    float4 _1220 = r0;
    _1220.x = (asuint(r0.y) != 0u) ? r0.x : asfloat(1065353216u);
    r0 = _1220;
    float4 _1232 = r0;
    _1232.x = (r0.x * r0.z) + (-cb0_m[13].w);
    r0 = _1232;
    float4 _1238 = r0;
    _1238.x = exp2(-r0.x);
    r0 = _1238;
    float4 _1244 = r0;
    _1244.x = min(r0.x, asfloat(1065353216u));
    r0 = _1244;
    float4 _1251 = o4;
    _1251.w = (-r0.x) + asfloat(1065353216u);
    o4 = _1251;
}

void vert_main()
{
    shader_in[0] = float4(v0.x, v0.y, v0.z, shader_in[0].w);
    float2 _1259 = asfloat(v1);
    shader_in[1] = float4(_1259.x, _1259.y, shader_in[1].z, shader_in[1].w);
    shader_in[2] = float4(v2.x, v2.y, v2.z, shader_in[2].w);
    shader_in[3] = v3;
    shader_in[4] = v4;
    shader_in[5] = asfloat(v5);
    vs_main();
    gl_Position = o0;
    gl_PointSize = 1.0f;
    gl_Position.x = gl_Position.x - gl_HalfPixel.x * gl_Position.w;
    gl_Position.y = gl_Position.y + gl_HalfPixel.y * gl_Position.w;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    v0 = stage_input.v0;
    v1 = stage_input.v1;
    v2 = stage_input.v2;
    v3 = stage_input.v3;
    v4 = stage_input.v4;
    v5 = stage_input.v5;
    vert_main();
    SPIRV_Cross_Output stage_output;
    stage_output.gl_Position = gl_Position;
    stage_output.gl_PointSize = gl_PointSize;
    return stage_output;
}
