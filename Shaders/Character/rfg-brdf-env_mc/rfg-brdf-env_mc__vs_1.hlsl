cbuffer cb0_t : register(b160)
{
    float4 cb0_m[14] : packoffset(c0);
};

cbuffer cb1_t : register(b161)
{
    float4 cb1_m[2] : packoffset(c0);
};

cbuffer cb4_t : register(b164)
{
    float4 cb4_m[4096] : packoffset(c0);
};

cbuffer cb6_t : register(b166)
{
    float4 cb6_m[3] : packoffset(c0);
};

cbuffer cb2_t : register(b162)
{
    float4 cb2_m[8] : packoffset(c0);
};

uniform float4 gl_HalfPixel;

static float4 gl_Position;
static float gl_PointSize;
static float3 v0;
static int2 v1;
static int2 v2;
static float3 v3;
static float4 v4;
static float4 v5;
static float4 v6;
static float4 v7;
static int4 v8;

struct SPIRV_Cross_Input
{
    float3 v0 : TEXCOORD0;
    float2 v1 : TEXCOORD1;
    float2 v2 : TEXCOORD2;
    float3 v3 : TEXCOORD3;
    float4 v4 : TEXCOORD4;
    float4 v5 : TEXCOORD5;
    float4 v6 : TEXCOORD6;
    float4 v7 : TEXCOORD7;
    float4 v8 : TEXCOORD8;
};

struct SPIRV_Cross_Output
{
    float4 gl_Position : POSITION;
    float gl_PointSize : PSIZE;
};

static float4 shader_in[9];
static float4 o0;
static float3 o1;
static float3 o2;
static float4 o3;
static float4 o4;
static float4 r0;
static float4 r1;
static float4 r2;
static float4 r3;
static float4 r4;
static float4 r5;
static float4 r6;

void vs_main()
{
    float4 _73 = r0;
    _73.x = shader_in[7].y + shader_in[7].x;
    r0 = _73;
    float4 _81 = r0;
    _81.x = r0.x + shader_in[7].z;
    r0 = _81;
    float4 _89 = r0;
    _89.x = r0.x + shader_in[7].w;
    r0 = _89;
    float4 _96 = r0;
    _96.x = asfloat(1065353216u) / r0.x;
    r0 = _96;
    float3 _111 = (shader_in[5].xyz * asfloat(uint3(1082130432u, 1082130432u, 1082130432u))) + shader_in[0].xyz;
    r1 = float4(_111.x, _111.y, _111.z, r1.w);
    float4 _116 = r1;
    _116.w = asfloat(1065353216u);
    r1 = _116;
    r2 = asfloat(asint(shader_in[8]) * int4(uint4(3u, 3u, 3u, 3u)));
    int _133 = asint(r2.y);
    r3 = shader_in[7].yyyy * float4(cb4_m[_133].x, cb4_m[_133].y, cb4_m[_133].z, cb4_m[_133].w);
    int _155 = asint(r2.x);
    r3 = (shader_in[7].xxxx * float4(cb4_m[_155].x, cb4_m[_155].y, cb4_m[_155].z, cb4_m[_155].w)) + r3;
    int _174 = asint(r2.z);
    r3 = (shader_in[7].zzzz * float4(cb4_m[_174].x, cb4_m[_174].y, cb4_m[_174].z, cb4_m[_174].w)) + r3;
    int _193 = asint(r2.w);
    r3 = (shader_in[7].wwww * float4(cb4_m[_193].x, cb4_m[_193].y, cb4_m[_193].z, cb4_m[_193].w)) + r3;
    float4 _222 = r4;
    _222.x = mad(r3.w, r1.w, mad(r3.z, r1.z, mad(r3.y, r1.y, r3.x * r1.x)));
    r4 = _222;
    int _231 = asint(r2.y) + 1;
    r5 = shader_in[7].yyyy * float4(cb4_m[_231].x, cb4_m[_231].y, cb4_m[_231].z, cb4_m[_231].w);
    int _250 = asint(r2.x) + 1;
    r5 = (shader_in[7].xxxx * float4(cb4_m[_250].x, cb4_m[_250].y, cb4_m[_250].z, cb4_m[_250].w)) + r5;
    int _270 = asint(r2.z) + 1;
    r5 = (shader_in[7].zzzz * float4(cb4_m[_270].x, cb4_m[_270].y, cb4_m[_270].z, cb4_m[_270].w)) + r5;
    int _290 = asint(r2.w) + 1;
    r5 = (shader_in[7].wwww * float4(cb4_m[_290].x, cb4_m[_290].y, cb4_m[_290].z, cb4_m[_290].w)) + r5;
    float4 _318 = r4;
    _318.y = mad(r5.w, r1.w, mad(r5.z, r1.z, mad(r5.y, r1.y, r5.x * r1.x)));
    r4 = _318;
    int _327 = asint(r2.y) + 2;
    r6 = shader_in[7].yyyy * float4(cb4_m[_327].x, cb4_m[_327].y, cb4_m[_327].z, cb4_m[_327].w);
    int _346 = asint(r2.x) + 2;
    r6 = (shader_in[7].xxxx * float4(cb4_m[_346].x, cb4_m[_346].y, cb4_m[_346].z, cb4_m[_346].w)) + r6;
    int _366 = asint(r2.z) + 2;
    r6 = (shader_in[7].zzzz * float4(cb4_m[_366].x, cb4_m[_366].y, cb4_m[_366].z, cb4_m[_366].w)) + r6;
    int _386 = asint(r2.w) + 2;
    r2 = (shader_in[7].wwww * float4(cb4_m[_386].x, cb4_m[_386].y, cb4_m[_386].z, cb4_m[_386].w)) + r6;
    float4 _414 = r4;
    _414.z = mad(r2.w, r1.w, mad(r2.z, r1.z, mad(r2.y, r1.y, r2.x * r1.x)));
    r4 = _414;
    float3 _420 = r0.xxx * r4.xyz;
    r1 = float4(_420.x, _420.y, _420.z, r1.w);
    float4 _424 = r1;
    _424.w = asfloat(1065353216u);
    r1 = _424;
    float4 _435 = float4(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z, cb6_m[0].w);
    float4 _449 = r4;
    _449.x = mad(_435.w, r1.w, mad(_435.z, r1.z, mad(_435.y, r1.y, _435.x * r1.x)));
    r4 = _449;
    float4 _460 = float4(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z, cb6_m[1].w);
    float4 _474 = r4;
    _474.y = mad(_460.w, r1.w, mad(_460.z, r1.z, mad(_460.y, r1.y, _460.x * r1.x)));
    r4 = _474;
    float4 _485 = float4(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z, cb6_m[2].w);
    float4 _499 = r4;
    _499.z = mad(_485.w, r1.w, mad(_485.z, r1.z, mad(_485.y, r1.y, _485.x * r1.x)));
    r4 = _499;
    float4 _502 = r4;
    _502.w = asfloat(1065353216u);
    r4 = _502;
    float4 _513 = float4(cb0_m[0].x, cb0_m[0].y, cb0_m[0].z, cb0_m[0].w);
    float4 _527 = o0;
    _527.x = mad(_513.w, r4.w, mad(_513.z, r4.z, mad(_513.y, r4.y, _513.x * r4.x)));
    o0 = _527;
    float4 _538 = float4(cb0_m[1].x, cb0_m[1].y, cb0_m[1].z, cb0_m[1].w);
    float4 _552 = o0;
    _552.y = mad(_538.w, r4.w, mad(_538.z, r4.z, mad(_538.y, r4.y, _538.x * r4.x)));
    o0 = _552;
    float4 _563 = float4(cb0_m[2].x, cb0_m[2].y, cb0_m[2].z, cb0_m[2].w);
    float4 _577 = o0;
    _577.z = mad(_563.w, r4.w, mad(_563.z, r4.z, mad(_563.y, r4.y, _563.x * r4.x)));
    o0 = _577;
    float4 _589 = float4(cb0_m[3].x, cb0_m[3].y, cb0_m[3].z, cb0_m[3].w);
    float4 _603 = o0;
    _603.w = mad(_589.w, r4.w, mad(_589.z, r4.z, mad(_589.y, r4.y, _589.x * r4.x)));
    o0 = _603;
    float3 _615 = (shader_in[3].xyz * asfloat(uint3(1073741824u, 1073741824u, 1073741824u))) + asfloat(uint3(3212836864u, 3212836864u, 3212836864u));
    r0 = float4(r0.x, _615.x, _615.y, _615.z);
    float3 _625 = (shader_in[6].xyz * asfloat(uint3(1073741824u, 1073741824u, 1073741824u))) + asfloat(uint3(3212836864u, 3212836864u, 3212836864u));
    r1 = float4(_625.x, _625.y, _625.z, r1.w);
    float3 _634 = (r1.xyz * asfloat(uint3(1073741824u, 1073741824u, 1073741824u))) + r0.yzw;
    r0 = float4(r0.x, _634.x, _634.y, _634.z);
    float4 _650 = r1;
    _650.x = mad(r0.yzw.z, r0.yzw.z, mad(r0.yzw.y, r0.yzw.y, r0.yzw.x * r0.yzw.x));
    r1 = _650;
    float4 _655 = r1;
    _655.x = rsqrt(r1.x);
    r1 = _655;
    float3 _661 = r0.yzw * r1.xxx;
    r0 = float4(r0.x, _661.x, _661.y, _661.z);
    float4 _677 = r1;
    _677.x = mad(r3.xyz.z, r0.yzw.z, mad(r3.xyz.y, r0.yzw.y, r3.xyz.x * r0.yzw.x));
    r1 = _677;
    float4 _692 = r1;
    _692.y = mad(r5.xyz.z, r0.yzw.z, mad(r5.xyz.y, r0.yzw.y, r5.xyz.x * r0.yzw.x));
    r1 = _692;
    float4 _707 = r1;
    _707.z = mad(r2.xyz.z, r0.yzw.z, mad(r2.xyz.y, r0.yzw.y, r2.xyz.x * r0.yzw.x));
    r1 = _707;
    float3 _713 = r0.xxx * r1.xyz;
    r0 = float4(r0.x, _713.x, _713.y, _713.z);
    float4 _729 = r1;
    _729.x = mad(r0.yzw.z, r0.yzw.z, mad(r0.yzw.y, r0.yzw.y, r0.yzw.x * r0.yzw.x));
    r1 = _729;
    float4 _734 = r1;
    _734.x = rsqrt(r1.x);
    r1 = _734;
    float3 _740 = r0.yzw * r1.xxx;
    r0 = float4(r0.x, _740.x, _740.y, _740.z);
    float3 _750 = float3(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z);
    float4 _762 = r1;
    _762.x = mad(_750.z, r0.yzw.z, mad(_750.y, r0.yzw.y, _750.x * r0.yzw.x));
    r1 = _762;
    float3 _771 = float3(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z);
    float4 _783 = r1;
    _783.y = mad(_771.z, r0.yzw.z, mad(_771.y, r0.yzw.y, _771.x * r0.yzw.x));
    r1 = _783;
    float3 _792 = float3(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z);
    float4 _804 = r1;
    _804.z = mad(_792.z, r0.yzw.z, mad(_792.y, r0.yzw.y, _792.x * r0.yzw.x));
    r1 = _804;
    float4 _819 = r0;
    _819.y = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _819;
    float4 _824 = r0;
    _824.y = rsqrt(r0.y);
    r0 = _824;
    float3 _830 = r0.yyy * r1.xyz;
    r0 = float4(r0.x, _830.x, _830.y, _830.z);
    r1 = (shader_in[4] * asfloat(uint4(1073741824u, 1073741824u, 1073741824u, 1073741824u))) + asfloat(uint4(3212836864u, 3212836864u, 3212836864u, 3212836864u));
    float4 _855 = r3;
    _855.x = mad(r3.xyz.z, r1.xyz.z, mad(r3.xyz.y, r1.xyz.y, r3.xyz.x * r1.xyz.x));
    r3 = _855;
    float4 _870 = r3;
    _870.y = mad(r5.xyz.z, r1.xyz.z, mad(r5.xyz.y, r1.xyz.y, r5.xyz.x * r1.xyz.x));
    r3 = _870;
    float4 _885 = r3;
    _885.z = mad(r2.xyz.z, r1.xyz.z, mad(r2.xyz.y, r1.xyz.y, r2.xyz.x * r1.xyz.x));
    r3 = _885;
    float3 _891 = r0.xxx * r3.xyz;
    r1 = float4(_891.x, _891.y, _891.z, r1.w);
    float4 _907 = r0;
    _907.x = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _907;
    float4 _912 = r0;
    _912.x = rsqrt(r0.x);
    r0 = _912;
    float3 _918 = r0.xxx * r1.xyz;
    r1 = float4(_918.x, _918.y, _918.z, r1.w);
    float3 _928 = float3(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z);
    float4 _940 = r2;
    _940.x = mad(_928.z, r1.xyz.z, mad(_928.y, r1.xyz.y, _928.x * r1.xyz.x));
    r2 = _940;
    float3 _949 = float3(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z);
    float4 _961 = r2;
    _961.y = mad(_949.z, r1.xyz.z, mad(_949.y, r1.xyz.y, _949.x * r1.xyz.x));
    r2 = _961;
    float3 _970 = float3(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z);
    float4 _982 = r2;
    _982.z = mad(_970.z, r1.xyz.z, mad(_970.y, r1.xyz.y, _970.x * r1.xyz.x));
    r2 = _982;
    float4 _997 = r0;
    _997.x = mad(r2.xyz.z, r2.xyz.z, mad(r2.xyz.y, r2.xyz.y, r2.xyz.x * r2.xyz.x));
    r0 = _997;
    float4 _1002 = r0;
    _1002.x = rsqrt(r0.x);
    r0 = _1002;
    float3 _1008 = r0.xxx * r2.xyz;
    r1 = float4(_1008.x, _1008.y, _1008.z, r1.w);
    float3 _1015 = r0.wyz * r1.yzx;
    r2 = float4(_1015.x, _1015.y, _1015.z, r2.w);
    float3 _1026 = (r0.zwy * r1.zxy) + (-r2.xyz);
    r2 = float4(_1026.x, _1026.y, _1026.z, r2.w);
    float3 _1033 = r1.www * r2.xyz;
    r2 = float4(_1033.x, _1033.y, _1033.z, r2.w);
    float3 _1047 = (-r4.xyz) + float3(cb1_m[0].x, cb1_m[0].y, cb1_m[0].z);
    r3 = float4(_1047.x, _1047.y, _1047.z, r3.w);
    float3 _1063 = o1;
    _1063.y = mad(r3.xyz.z, r2.xyz.z, mad(r3.xyz.y, r2.xyz.y, r3.xyz.x * r2.xyz.x));
    o1 = _1063;
    float3 _1078 = o1;
    _1078.z = mad(r3.xyz.z, r0.yzw.z, mad(r3.xyz.y, r0.yzw.y, r3.xyz.x * r0.yzw.x));
    o1 = _1078;
    float3 _1093 = o1;
    _1093.x = mad(r3.xyz.z, r1.xyz.z, mad(r3.xyz.y, r1.xyz.y, r3.xyz.x * r1.xyz.x));
    o1 = _1093;
    float3 _1107 = (-r4.xyz) + float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z);
    r3 = float4(_1107.x, _1107.y, _1107.z, r3.w);
    float3 _1121 = r4.xyz + (-float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z));
    r4 = float4(_1121.x, _1121.y, _1121.z, r4.w);
    float4 _1137 = r0;
    _1137.x = mad(r3.xyz.z, r3.xyz.z, mad(r3.xyz.y, r3.xyz.y, r3.xyz.x * r3.xyz.x));
    r0 = _1137;
    float4 _1142 = r0;
    _1142.x = rsqrt(r0.x);
    r0 = _1142;
    float3 _1148 = r0.xxx * r3.xyz;
    r3 = float4(_1148.x, _1148.y, _1148.z, r3.w);
    float3 _1164 = o2;
    _1164.z = mad(r3.xyz.z, r0.yzw.z, mad(r3.xyz.y, r0.yzw.y, r3.xyz.x * r0.yzw.x));
    o2 = _1164;
    float3 _1173 = float3(cb1_m[1].x, cb1_m[1].y, cb1_m[1].z);
    float4 _1185 = o3;
    _1185.z = mad(_1173.z, r0.yzw.z, mad(_1173.y, r0.yzw.y, _1173.x * r0.yzw.x));
    o3 = _1185;
    float3 _1200 = o2;
    _1200.x = mad(r3.xyz.z, r1.xyz.z, mad(r3.xyz.y, r1.xyz.y, r3.xyz.x * r1.xyz.x));
    o2 = _1200;
    float3 _1209 = float3(cb1_m[1].x, cb1_m[1].y, cb1_m[1].z);
    float4 _1221 = o3;
    _1221.x = mad(_1209.z, r1.xyz.z, mad(_1209.y, r1.xyz.y, _1209.x * r1.xyz.x));
    o3 = _1221;
    float3 _1236 = o2;
    _1236.y = mad(r3.xyz.z, r2.xyz.z, mad(r3.xyz.y, r2.xyz.y, r3.xyz.x * r2.xyz.x));
    o2 = _1236;
    float3 _1245 = float3(cb1_m[1].x, cb1_m[1].y, cb1_m[1].z);
    float4 _1257 = o3;
    _1257.y = mad(_1245.z, r2.xyz.z, mad(_1245.y, r2.xyz.y, _1245.x * r2.xyz.x));
    o3 = _1257;
    float4 _1266 = r0;
    _1266.x = r4.y * cb0_m[13].x;
    r0 = _1266;
    float4 _1273 = r0;
    _1273.y = r0.x * asfloat(3216550459u);
    r0 = _1273;
    float4 _1278 = r0;
    _1278.y = exp2(r0.y);
    r0 = _1278;
    float4 _1285 = r0;
    _1285.y = (-r0.y) + asfloat(1065353216u);
    r0 = _1285;
    float4 _1292 = r0;
    _1292.x = r0.y / r0.x;
    r0 = _1292;
    float4 _1304 = r0;
    _1304.y = asfloat((asfloat(1008981770u) < abs(r4.y)) ? 4294967295u : 0u);
    r0 = _1304;
    float4 _1319 = r0;
    _1319.z = mad(r4.xyz.z, r4.xyz.z, mad(r4.xyz.y, r4.xyz.y, r4.xyz.x * r4.xyz.x));
    r0 = _1319;
    float4 _1324 = r0;
    _1324.z = sqrt(r0.z);
    r0 = _1324;
    float4 _1332 = r0;
    _1332.z = r0.z * cb0_m[13].y;
    r0 = _1332;
    float4 _1342 = r0;
    _1342.x = (asuint(r0.y) != 0u) ? r0.x : asfloat(1065353216u);
    r0 = _1342;
    float4 _1354 = r0;
    _1354.x = (r0.x * r0.z) + (-cb0_m[13].w);
    r0 = _1354;
    float4 _1360 = r0;
    _1360.x = exp2(-r0.x);
    r0 = _1360;
    float4 _1366 = r0;
    _1366.x = min(r0.x, asfloat(1065353216u));
    r0 = _1366;
    float4 _1373 = o3;
    _1373.w = (-r0.x) + asfloat(1065353216u);
    o3 = _1373;
    float2 _1380 = float2(asint(shader_in[1].xy));
    r0 = float4(_1380.x, _1380.y, r0.z, r0.w);
    float2 _1391 = r0.xy * float2(cb2_m[7].x, cb2_m[7].y);
    r0 = float4(_1391.x, _1391.y, r0.z, r0.w);
    float2 _1400 = r0.xy * asfloat(uint2(981467136u, 981467136u));
    o4 = float4(_1400.x, _1400.y, o4.z, o4.w);
    float2 _1407 = float2(asint(shader_in[2].xy));
    r0 = float4(_1407.x, _1407.y, r0.z, r0.w);
    float2 _1413 = r0.xy * asfloat(uint2(981467136u, 981467136u));
    o4 = float4(o4.x, o4.y, _1413.x, _1413.y);
}

void vert_main()
{
    shader_in[0] = float4(v0.x, v0.y, v0.z, shader_in[0].w);
    float2 _1422 = asfloat(v1);
    shader_in[1] = float4(_1422.x, _1422.y, shader_in[1].z, shader_in[1].w);
    float2 _1427 = asfloat(v2);
    shader_in[2] = float4(_1427.x, _1427.y, shader_in[2].z, shader_in[2].w);
    shader_in[3] = float4(v3.x, v3.y, v3.z, shader_in[3].w);
    shader_in[4] = v4;
    shader_in[5] = v5;
    shader_in[6] = v6;
    shader_in[7] = v7;
    shader_in[8] = asfloat(v8);
    vs_main();
    gl_Position = o0;
    gl_PointSize = 1.0f;
    gl_Position.x = gl_Position.x - gl_HalfPixel.x * gl_Position.w;
    gl_Position.y = gl_Position.y + gl_HalfPixel.y * gl_Position.w;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    v0 = stage_input.v0;
    v1 = stage_input.v1;
    v2 = stage_input.v2;
    v3 = stage_input.v3;
    v4 = stage_input.v4;
    v5 = stage_input.v5;
    v6 = stage_input.v6;
    v7 = stage_input.v7;
    v8 = stage_input.v8;
    vert_main();
    SPIRV_Cross_Output stage_output;
    stage_output.gl_Position = gl_Position;
    stage_output.gl_PointSize = gl_PointSize;
    return stage_output;
}
