cbuffer cb0_t : register(b160)
{
    float4 cb0_m[14] : packoffset(c0);
};

cbuffer cb3_t : register(b163)
{
    float4 cb3_m[9] : packoffset(c0);
};

cbuffer cb6_t : register(b166)
{
    float4 cb6_m[3] : packoffset(c0);
};

uniform float4 gl_HalfPixel;

static float4 gl_Position;
static float gl_PointSize;
static float3 v0;
static float4 v1;
static float v2;
static float2 v3;
static float2 v4;
static float3 v5;
static float3 v6;
static float v7;
static float v8;

struct SPIRV_Cross_Input
{
    float3 v0 : TEXCOORD0;
    float4 v1 : TEXCOORD1;
    float v2 : TEXCOORD2;
    float2 v3 : TEXCOORD3;
    float2 v4 : TEXCOORD4;
    float3 v5 : TEXCOORD5;
    float3 v6 : TEXCOORD6;
    float v7 : TEXCOORD7;
    float v8 : TEXCOORD8;
};

struct SPIRV_Cross_Output
{
    float4 gl_Position : POSITION;
    float gl_PointSize : PSIZE;
};

static float4 shader_in[9];
static float4 o0;
static float4 o1;
static float4 o2;
static float4 o3;
static float4 r0;
static float4 r1;
static float4 r2;
static float4 r3;

void vs_main()
{
    r0 = float4(shader_in[5].xyz.x, shader_in[5].xyz.y, shader_in[5].xyz.z, r0.w);
    float4 _60 = r0;
    _60.w = asfloat(1065353216u);
    r0 = _60;
    float4 _77 = float4(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z, cb6_m[0].w);
    float4 _92 = r1;
    _92.z = mad(_77.w, r0.w, mad(_77.z, r0.z, mad(_77.y, r0.y, _77.x * r0.x)));
    r1 = _92;
    float4 _104 = float4(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z, cb6_m[1].w);
    float4 _118 = r1;
    _118.x = mad(_104.w, r0.w, mad(_104.z, r0.z, mad(_104.y, r0.y, _104.x * r0.x)));
    r1 = _118;
    float4 _130 = float4(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z, cb6_m[2].w);
    float4 _144 = r1;
    _144.y = mad(_130.w, r0.w, mad(_130.z, r0.z, mad(_130.y, r0.y, _130.x * r0.x)));
    r1 = _144;
    r0 = float4(shader_in[0].xyz.x, shader_in[0].xyz.y, shader_in[0].xyz.z, r0.w);
    float4 _152 = r0;
    _152.w = asfloat(1065353216u);
    r0 = _152;
    float4 _163 = float4(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z, cb6_m[0].w);
    float4 _178 = r2;
    _178.x = mad(_163.w, r0.w, mad(_163.z, r0.z, mad(_163.y, r0.y, _163.x * r0.x)));
    r2 = _178;
    float4 _189 = float4(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z, cb6_m[1].w);
    float4 _203 = r2;
    _203.y = mad(_189.w, r0.w, mad(_189.z, r0.z, mad(_189.y, r0.y, _189.x * r0.x)));
    r2 = _203;
    float4 _214 = float4(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z, cb6_m[2].w);
    float4 _228 = r2;
    _228.z = mad(_214.w, r0.w, mad(_214.z, r0.z, mad(_214.y, r0.y, _214.x * r0.x)));
    r2 = _228;
    float3 _235 = r1.xyz + (-r2.yzx);
    r0 = float4(_235.x, _235.y, _235.z, r0.w);
    float4 _251 = r0;
    _251.w = mad(r0.xyz.z, r0.xyz.z, mad(r0.xyz.y, r0.xyz.y, r0.xyz.x * r0.xyz.x));
    r0 = _251;
    float4 _256 = r0;
    _256.w = rsqrt(r0.w);
    r0 = _256;
    float3 _262 = r0.www * r0.xyz;
    r0 = float4(_262.x, _262.y, _262.z, r0.w);
    r1 = float4(shader_in[6].xyz.x, shader_in[6].xyz.y, shader_in[6].xyz.z, r1.w);
    float4 _272 = r1;
    _272.w = asfloat(1065353216u);
    r1 = _272;
    float4 _283 = float4(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z, cb6_m[0].w);
    float4 _298 = r3;
    _298.z = mad(_283.w, r1.w, mad(_283.z, r1.z, mad(_283.y, r1.y, _283.x * r1.x)));
    r3 = _298;
    float4 _309 = float4(cb6_m[1].x, cb6_m[1].y, cb6_m[1].z, cb6_m[1].w);
    float4 _323 = r3;
    _323.x = mad(_309.w, r1.w, mad(_309.z, r1.z, mad(_309.y, r1.y, _309.x * r1.x)));
    r3 = _323;
    float4 _334 = float4(cb6_m[2].x, cb6_m[2].y, cb6_m[2].z, cb6_m[2].w);
    float4 _348 = r3;
    _348.y = mad(_334.w, r1.w, mad(_334.z, r1.z, mad(_334.y, r1.y, _334.x * r1.x)));
    r3 = _348;
    float3 _355 = (-r2.yzx) + r3.xyz;
    r1 = float4(_355.x, _355.y, _355.z, r1.w);
    float4 _371 = r0;
    _371.w = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _371;
    float4 _376 = r0;
    _376.w = sqrt(r0.w);
    r0 = _376;
    float4 _386 = r0;
    _386.w = asfloat((r0.w == asfloat(0u)) ? 4294967295u : 0u);
    r0 = _386;
    uint3 _391 = asuint(r0.www);
    float3 _394 = -r0.xyz;
    bool3 _399 = bool3(_391.x != uint3(0u, 0u, 0u).x, _391.y != uint3(0u, 0u, 0u).y, _391.z != uint3(0u, 0u, 0u).z);
    float3 _400 = float3(_399.x ? _394.x : r1.xyz.x, _399.y ? _394.y : r1.xyz.y, _399.z ? _394.z : r1.xyz.z);
    r0 = float4(_400.x, _400.y, _400.z, r0.w);
    float4 _416 = r0;
    _416.w = mad(r0.xyz.z, r0.xyz.z, mad(r0.xyz.y, r0.xyz.y, r0.xyz.x * r0.xyz.x));
    r0 = _416;
    float4 _421 = r0;
    _421.w = rsqrt(r0.w);
    r0 = _421;
    float3 _427 = r0.www * r0.xyz;
    r0 = float4(_427.x, _427.y, _427.z, r0.w);
    float3 _442 = r2.zxy + (-float3(cb0_m[11].z, cb0_m[11].x, cb0_m[11].y));
    r1 = float4(_442.x, _442.y, _442.z, r1.w);
    float4 _458 = r0;
    _458.w = mad(r1.xyz.z, r1.xyz.z, mad(r1.xyz.y, r1.xyz.y, r1.xyz.x * r1.xyz.x));
    r0 = _458;
    float4 _463 = r0;
    _463.w = rsqrt(r0.w);
    r0 = _463;
    float3 _469 = r0.www * r1.xyz;
    r1 = float4(_469.x, _469.y, _469.z, r1.w);
    float3 _476 = r0.xyz * r1.xyz;
    r3 = float4(_476.x, _476.y, _476.z, r3.w);
    float3 _487 = (r1.zxy * r0.yzx) + (-r3.xyz);
    r0 = float4(_487.x, _487.y, _487.z, r0.w);
    float4 _503 = r0;
    _503.w = mad(r0.xyz.z, r0.xyz.z, mad(r0.xyz.y, r0.xyz.y, r0.xyz.x * r0.xyz.x));
    r0 = _503;
    float4 _508 = r0;
    _508.w = rsqrt(r0.w);
    r0 = _508;
    float3 _514 = r0.www * r0.xyz;
    r0 = float4(_514.x, _514.y, _514.z, r0.w);
    float3 _526 = (r0.xyz * shader_in[4].xxx) + r2.xyz;
    r0 = float4(_526.x, _526.y, _526.z, r0.w);
    float4 _530 = r0;
    _530.w = asfloat(1065353216u);
    r0 = _530;
    float4 _541 = float4(cb0_m[0].x, cb0_m[0].y, cb0_m[0].z, cb0_m[0].w);
    float4 _555 = r1;
    _555.x = mad(_541.w, r0.w, mad(_541.z, r0.z, mad(_541.y, r0.y, _541.x * r0.x)));
    r1 = _555;
    float4 _566 = float4(cb0_m[1].x, cb0_m[1].y, cb0_m[1].z, cb0_m[1].w);
    float4 _580 = r1;
    _580.y = mad(_566.w, r0.w, mad(_566.z, r0.z, mad(_566.y, r0.y, _566.x * r0.x)));
    r1 = _580;
    float4 _592 = float4(cb0_m[3].x, cb0_m[3].y, cb0_m[3].z, cb0_m[3].w);
    float4 _606 = r1;
    _606.w = mad(_592.w, r0.w, mad(_592.z, r0.z, mad(_592.y, r0.y, _592.x * r0.x)));
    r1 = _606;
    float4 _617 = float4(cb0_m[2].x, cb0_m[2].y, cb0_m[2].z, cb0_m[2].w);
    float4 _631 = o0;
    _631.z = mad(_617.w, r0.w, mad(_617.z, r0.z, mad(_617.y, r0.y, _617.x * r0.x)));
    o0 = _631;
    float3 _644 = r0.xyz + (-float3(cb0_m[11].x, cb0_m[11].y, cb0_m[11].z));
    r0 = float4(_644.x, _644.y, _644.z, r0.w);
    o0 = float4(r1.xyw.x, r1.xyw.y, o0.z, r1.xyw.z);
    float2 _655 = r1.xy / r1.ww;
    r1 = float4(_655.x, _655.y, r1.z, r1.w);
    float4 _660 = o3;
    _660.z = r1.w;
    o3 = _660;
    float2 _670 = (r1.xy * asfloat(uint2(1056964608u, 1056964608u))) + asfloat(uint2(1056964608u, 1056964608u));
    r1 = float4(_670.x, _670.y, r1.z, r1.w);
    float2 _681 = (r1.xy * asfloat(uint2(1065353216u, 3212836864u))) + asfloat(uint2(0u, 1065353216u));
    o2 = float4(o2.x, o2.y, _681.x, _681.y);
    float3 _701 = (shader_in[1].zyx * float3(cb3_m[7].x, cb3_m[7].y, cb3_m[7].z)) + (-shader_in[1].zyx);
    r1 = float4(_701.x, _701.y, _701.z, r1.w);
    float3 _714 = (cb3_m[7].w.xxx * r1.xyz) + shader_in[1].zyx;
    r1 = float4(_714.x, _714.y, _714.z, r1.w);
    float3 _743 = (float3(cb3_m[6].x, cb3_m[6].y, cb3_m[6].z) * float3(cb3_m[7].x, cb3_m[7].y, cb3_m[7].z)) + (-float3(cb3_m[6].x, cb3_m[6].y, cb3_m[6].z));
    r2 = float4(_743.x, _743.y, _743.z, r2.w);
    float3 _761 = (cb3_m[7].w.xxx * r2.xyz) + float3(cb3_m[6].x, cb3_m[6].y, cb3_m[6].z);
    r2 = float4(_761.x, _761.y, _761.z, r2.w);
    float3 _768 = r1.xyz + r2.xyz;
    o1 = float4(_768.x, _768.y, _768.z, o1.w);
    float4 _778 = o1;
    _778.w = shader_in[1].w * cb3_m[5].x;
    o1 = _778;
    float4 _787 = r0;
    _787.w = shader_in[8].x + asfloat(841731191u);
    r0 = _787;
    float4 _796 = r1;
    _796.x = cb3_m[8].y * cb3_m[8].x;
    r1 = _796;
    float4 _801 = r1;
    _801.y = trunc(r1.x);
    r1 = _801;
    float4 _807 = r1;
    _807.x = asfloat(int(r1.x));
    r1 = _807;
    float4 _818 = r1;
    _818.x = asfloat(max(asint(r1.x), (-asint(r1.x))));
    r1 = _818;
    float4 _825 = r0;
    _825.w = r0.w * r1.y;
    r0 = _825;
    float4 _831 = r0;
    _831.w = asfloat(int(r0.w));
    r0 = _831;
    float4 _842 = r1;
    _842.y = asfloat(max(asint(r0.w), (-asint(r0.w))));
    r1 = _842;
    float4 _850 = r0;
    _850.w = asfloat(asuint(r0.w) & 2147483648u);
    r0 = _850;
    uint _857 = asuint(r1.x);
    float4 _862 = r1;
    _862.x = asfloat((_857 != 0u) ? (asuint(r1.y) % _857) : 4294967295u);
    r1 = _862;
    float4 _869 = r1;
    _869.y = asfloat(-asint(r1.x));
    r1 = _869;
    float4 _880 = r0;
    _880.w = (asuint(r0.w) != 0u) ? r1.y : r1.x;
    r0 = _880;
    float4 _887 = r1;
    _887.x = asfloat(asuint(r0.w) & 2147483648u);
    r1 = _887;
    float4 _898 = r1;
    _898.y = asfloat(max(asint(r0.w), (-asint(r0.w))));
    r1 = _898;
    float4 _904 = r0;
    _904.w = float(asint(r0.w));
    r0 = _904;
    float4 _912 = r0;
    _912.w = r0.w / cb3_m[8].x;
    r0 = _912;
    float4 _917 = r0;
    _917.w = trunc(r0.w);
    r0 = _917;
    float4 _924 = r1;
    _924.z = asfloat(int(cb3_m[8].x));
    r1 = _924;
    float4 _935 = r1;
    _935.z = asfloat(max(asint(r1.z), (-asint(r1.z))));
    r1 = _935;
    uint _942 = asuint(r1.z);
    float4 _947 = r1;
    _947.y = asfloat((_942 != 0u) ? (asuint(r1.y) % _942) : 4294967295u);
    r1 = _947;
    float4 _954 = r1;
    _954.z = asfloat(-asint(r1.y));
    r1 = _954;
    float4 _965 = r1;
    _965.x = (asuint(r1.x) != 0u) ? r1.z : r1.y;
    r1 = _965;
    float4 _971 = r1;
    _971.x = float(asint(r1.x));
    r1 = _971;
    float2 _981 = asfloat(uint2(1065353216u, 1065353216u)) / float2(cb3_m[8].x, cb3_m[8].y);
    r1 = float4(r1.x, _981.x, _981.y, r1.w);
    float2 _989 = r1.yz * shader_in[3].xy;
    r2 = float4(_989.x, _989.y, r2.z, r2.w);
    float4 _1000 = o2;
    _1000.x = (r1.x * r1.y) + r2.x;
    o2 = _1000;
    float4 _1010 = o2;
    _1010.y = (r0.w * r1.z) + r2.y;
    o2 = _1010;
    float4 _1019 = r0;
    _1019.w = r0.y * cb0_m[13].x;
    r0 = _1019;
    float4 _1026 = r1;
    _1026.x = r0.w * asfloat(3216550459u);
    r1 = _1026;
    float4 _1031 = r1;
    _1031.x = exp2(r1.x);
    r1 = _1031;
    float4 _1038 = r1;
    _1038.x = (-r1.x) + asfloat(1065353216u);
    r1 = _1038;
    float4 _1045 = r0;
    _1045.w = r1.x / r0.w;
    r0 = _1045;
    float4 _1055 = r1;
    _1055.x = asfloat((asfloat(1008981770u) < abs(r0.y)) ? 4294967295u : 0u);
    r1 = _1055;
    float4 _1070 = r0;
    _1070.x = mad(r0.xyz.z, r0.xyz.z, mad(r0.xyz.y, r0.xyz.y, r0.xyz.x * r0.xyz.x));
    r0 = _1070;
    float4 _1075 = r0;
    _1075.x = sqrt(r0.x);
    r0 = _1075;
    float4 _1083 = r0;
    _1083.x = r0.x * cb0_m[13].y;
    r0 = _1083;
    float4 _1093 = r0;
    _1093.y = (asuint(r1.x) != 0u) ? r0.w : asfloat(1065353216u);
    r0 = _1093;
    float4 _1105 = r0;
    _1105.x = (r0.y * r0.x) + (-cb0_m[13].w);
    r0 = _1105;
    float4 _1111 = r0;
    _1111.x = exp2(-r0.x);
    r0 = _1111;
    float4 _1117 = r0;
    _1117.x = min(r0.x, asfloat(1065353216u));
    r0 = _1117;
    float4 _1124 = o3;
    _1124.w = (-r0.x) + asfloat(1065353216u);
    o3 = _1124;
    float4 _1129 = o3;
    _1129.x = shader_in[2].x;
    o3 = _1129;
    float4 _1134 = o3;
    _1134.y = shader_in[7].x;
    o3 = _1134;
}

void vert_main()
{
    shader_in[0] = float4(v0.x, v0.y, v0.z, shader_in[0].w);
    shader_in[1] = v1;
    float4 _1145 = shader_in[2];
    _1145.x = v2;
    shader_in[2] = _1145;
    shader_in[3] = float4(v3.x, v3.y, shader_in[3].z, shader_in[3].w);
    shader_in[4] = float4(v4.x, v4.y, shader_in[4].z, shader_in[4].w);
    shader_in[5] = float4(v5.x, v5.y, v5.z, shader_in[5].w);
    shader_in[6] = float4(v6.x, v6.y, v6.z, shader_in[6].w);
    float4 _1165 = shader_in[7];
    _1165.x = v7;
    shader_in[7] = _1165;
    float4 _1169 = shader_in[8];
    _1169.x = v8;
    shader_in[8] = _1169;
    vs_main();
    gl_Position = o0;
    gl_PointSize = 1.0f;
    gl_Position.x = gl_Position.x - gl_HalfPixel.x * gl_Position.w;
    gl_Position.y = gl_Position.y + gl_HalfPixel.y * gl_Position.w;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    v0 = stage_input.v0;
    v1 = stage_input.v1;
    v2 = stage_input.v2;
    v3 = stage_input.v3;
    v4 = stage_input.v4;
    v5 = stage_input.v5;
    v6 = stage_input.v6;
    v7 = stage_input.v7;
    v8 = stage_input.v8;
    vert_main();
    SPIRV_Cross_Output stage_output;
    stage_output.gl_Position = gl_Position;
    stage_output.gl_PointSize = gl_PointSize;
    return stage_output;
}
