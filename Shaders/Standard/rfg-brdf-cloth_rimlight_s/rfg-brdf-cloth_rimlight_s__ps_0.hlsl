cbuffer cb0_t : register(b0)
{
    float4 cb0_m[7] : packoffset(c0);
};

cbuffer cb1_t : register(b1)
{
    float4 cb1_m[1] : packoffset(c0);
};

cbuffer cb6_t : register(b6)
{
    float4 cb6_m[1] : packoffset(c0);
};

cbuffer cb2_t : register(b2)
{
    float4 cb2_m[7] : packoffset(c0);
};

uniform sampler2D SPIRV_Cross_Combinedt0s0;
uniform sampler2D SPIRV_Cross_Combinedt2s2;
uniform sampler2D SPIRV_Cross_Combinedt1s1;
uniform sampler2D SPIRV_Cross_Combinedt15s15;

static float4 gl_FragCoord;
static float2 v1;
static float3 v2;
static float3 v3;
static float4 v4;

struct SPIRV_Cross_Input
{
    float2 v1 : TEXCOORD1;
    float3 v2 : TEXCOORD2;
    float3 v3 : TEXCOORD3;
    float4 v4 : TEXCOORD4;
    float4 gl_FragCoord : VPOS;
};

static float4 shader_in[5];
static float4 o0;
static float4 r0;
static float4 r1;
static float4 r2;
static float4 r3;
static float4 r4;
static float4 r5;
static float4 r6;

void ps_main()
{
    r0 = tex2D(SPIRV_Cross_Combinedt0s0, shader_in[1].xyxx.xy);
    float3 _79 = (r0.xyw * asfloat(uint3(1073741824u, 1073741824u, 1073741824u))) + asfloat(uint3(3212836864u, 3212836864u, 3212836864u));
    r1 = float4(r1.x, _79.x, _79.y, _79.z);
    float4 _88 = r0;
    _88.y = r0.y + r0.y;
    r0 = _88;
    float4 _95 = r1;
    _95.x = r1.w * r1.y;
    r1 = _95;
    float4 _107 = r0;
    _107.w = mad(r1.xz.y, r1.xz.y, r1.xz.x * r1.xz.x);
    r0 = _107;
    float4 _111 = r0;
    _111.x = r1.x;
    r0 = _111;
    float4 _119 = r0;
    _119.w = (-r0.w) + asfloat(1065353216u);
    r0 = _119;
    float4 _126 = r0;
    _126.w = max(r0.w, asfloat(0u));
    r0 = _126;
    float4 _131 = r0;
    _131.z = sqrt(r0.w);
    r0 = _131;
    float3 _138 = r0.xyz + asfloat(uint3(2147483648u, 3212836864u, 3212836864u));
    r0 = float4(_138.x, _138.y, _138.z, r0.w);
    float3 _155 = (cb2_m[5].z.xxx * r0.xyz) + asfloat(uint3(0u, 0u, 1065353216u));
    r0 = float4(_155.x, _155.y, _155.z, r0.w);
    float4 _171 = r0;
    _171.w = mad(r0.xyz.z, r0.xyz.z, mad(r0.xyz.y, r0.xyz.y, r0.xyz.x * r0.xyz.x));
    r0 = _171;
    float4 _176 = r0;
    _176.w = rsqrt(r0.w);
    r0 = _176;
    float3 _182 = r0.www * r0.xyz;
    r0 = float4(_182.x, _182.y, _182.z, r0.w);
    float4 _201 = r0;
    _201.w = mad(shader_in[2].xyz.z, shader_in[2].xyz.z, mad(shader_in[2].xyz.y, shader_in[2].xyz.y, shader_in[2].xyz.x * shader_in[2].xyz.x));
    r0 = _201;
    float4 _206 = r0;
    _206.w = rsqrt(r0.w);
    r0 = _206;
    float3 _213 = r0.www * shader_in[2].xyz;
    r1 = float4(_213.x, _213.y, _213.z, r1.w);
    float4 _232 = r0;
    _232.w = mad(shader_in[3].xyz.z, shader_in[3].xyz.z, mad(shader_in[3].xyz.y, shader_in[3].xyz.y, shader_in[3].xyz.x * shader_in[3].xyz.x));
    r0 = _232;
    float4 _237 = r0;
    _237.w = rsqrt(r0.w);
    r0 = _237;
    float3 _247 = (shader_in[3].xyz * r0.www) + r1.xyz;
    r2 = float4(_247.x, _247.y, _247.z, r2.w);
    float4 _264 = r1;
    _264.x = mad(r1.xyz.z, r0.xyz.z, mad(r1.xyz.y, r0.xyz.y, r1.xyz.x * r0.xyz.x));
    r1 = _264;
    float4 _270 = r1;
    _270.x = max(r1.x, asfloat(0u));
    r1 = _270;
    float3 _277 = r0.www * shader_in[3].xyz;
    r1 = float4(r1.x, _277.x, _277.y, _277.z);
    float4 _293 = r0;
    _293.w = mad(r0.xyz.z, r1.yzw.z, mad(r0.xyz.y, r1.yzw.y, r0.xyz.x * r1.yzw.x));
    r0 = _293;
    float4 _308 = r1;
    _308.y = mad(r2.xyz.z, r2.xyz.z, mad(r2.xyz.y, r2.xyz.y, r2.xyz.x * r2.xyz.x));
    r1 = _308;
    float4 _313 = r1;
    _313.y = rsqrt(r1.y);
    r1 = _313;
    float3 _319 = r1.yyy * r2.xyz;
    r1 = float4(r1.x, _319.x, _319.y, _319.z);
    float4 _335 = r1;
    _335.y = mad(r0.xyz.z, r1.yzw.z, mad(r0.xyz.y, r1.yzw.y, r0.xyz.x * r1.yzw.x));
    r1 = _335;
    float4 _352 = r0;
    _352.x = mad(r0.xyz.z, shader_in[4].xyz.z, mad(r0.xyz.y, shader_in[4].xyz.y, r0.xyz.x * shader_in[4].xyz.x));
    r0 = _352;
    float4 _364 = r0;
    _364.x = clamp((r0.x * asfloat(1056964608u)) + asfloat(1056964608u), 0.0f, 1.0f);
    r0 = _364;
    float4 _370 = r0;
    _370.y = max(r1.y, asfloat(0u));
    r0 = _370;
    float4 _375 = r0;
    _375.y = log2(r0.y);
    r0 = _375;
    float4 _384 = r0;
    _384.y = r0.y * cb2_m[6].y;
    r0 = _384;
    float4 _389 = r0;
    _389.y = exp2(r0.y);
    r0 = _389;
    float4 _398 = r0;
    _398.y = r0.y * cb2_m[5].w;
    r0 = _398;
    r2 = tex2D(SPIRV_Cross_Combinedt2s2, shader_in[1].xyxx.xy);
    float3 _418 = r2.xyz * float3(cb2_m[4].x, cb2_m[4].y, cb2_m[4].z);
    r1 = float4(r1.x, _418.x, _418.y, _418.z);
    float3 _425 = r0.yyy * r1.yzw;
    r2 = float4(_425.x, _425.y, _425.z, r2.w);
    float4 _432 = r0;
    _432.y = max(r0.w, asfloat(0u));
    r0 = _432;
    float4 _440 = r0;
    _440.z = (-r0.w) + asfloat(1053609165u);
    r0 = _440;
    float4 _448 = r0;
    _448.z = clamp(r0.z * asfloat(1075838976u), 0.0f, 1.0f);
    r0 = _448;
    float4 _455 = r0;
    _455.y = (-r0.y) + asfloat(1065353216u);
    r0 = _455;
    float4 _460 = r0;
    _460.y = log2(r0.y);
    r0 = _460;
    float4 _467 = r0;
    _467.y = r0.y * asfloat(1060320051u);
    r0 = _467;
    float4 _472 = r0;
    _472.y = exp2(r0.y);
    r0 = _472;
    float2 _483 = (r1.xx * asfloat(uint2(1056964608u, 1070945901u))) + asfloat(uint2(1056964608u, 3212836864u));
    r1 = float4(r1.x, r1.y, _483.x, _483.y);
    float4 _493 = r3;
    _493.y = (-abs(r1.w)) + asfloat(1065353216u);
    r3 = _493;
    float4 _503 = r0;
    _503.w = ((-r1.z) * asfloat(1069547520u)) + asfloat(1065353216u);
    r0 = _503;
    float4 _509 = r0;
    _509.w = max(r0.w, asfloat(0u));
    r0 = _509;
    float4 _516 = r0;
    _516.z = r0.w * r0.z;
    r0 = _516;
    float4 _522 = r0;
    _522.w = max(r3.y, asfloat(0u));
    r0 = _522;
    float4 _529 = r0;
    _529.y = r0.y * r0.w;
    r0 = _529;
    float4 _536 = r0;
    _536.y = max(r0.y, asfloat(897988541u));
    r0 = _536;
    float4 _541 = r0;
    _541.y = log2(r0.y);
    r0 = _541;
    float4 _547 = r0;
    _547.y = r0.y * asfloat(1060320051u);
    r0 = _547;
    float4 _552 = r3;
    _552.z = exp2(r0.y);
    r3 = _552;
    float4 _558 = r3;
    _558.x = r1.x * asfloat(1070945901u);
    r3 = _558;
    float3 _564 = clamp(r3.xyz, 0.0f.xxx, 1.0f.xxx);
    r3 = float4(_564.x, _564.y, _564.z, r3.w);
    float3 _571 = r3.xyz * r3.xyz;
    r3 = float4(_571.x, _571.y, _571.z, r3.w);
    float3 _584 = r3.xxx * float3(cb2_m[0].x, cb2_m[0].y, cb2_m[0].z);
    r4 = float4(_584.x, _584.y, _584.z, r4.w);
    float3 _598 = r3.yyy * float3(cb2_m[1].x, cb2_m[1].y, cb2_m[1].z);
    r5 = float4(_598.x, _598.y, _598.z, r5.w);
    float3 _616 = ((-float3(cb2_m[1].x, cb2_m[1].y, cb2_m[1].z)) * r3.yyy) + asfloat(uint3(1065353216u, 1065353216u, 1065353216u));
    r3 = float4(_616.x, _616.y, r3.z, _616.z);
    float3 _626 = (r4.xyz * r3.xyw) + r5.xyz;
    r3 = float4(_626.x, _626.y, r3.z, _626.z);
    float3 _639 = r3.zzz * float3(cb2_m[2].x, cb2_m[2].y, cb2_m[2].z);
    r4 = float4(_639.x, _639.y, _639.z, r4.w);
    float3 _655 = ((-float3(cb2_m[2].x, cb2_m[2].y, cb2_m[2].z)) * r3.zzz) + asfloat(uint3(1065353216u, 1065353216u, 1065353216u));
    r5 = float4(_655.x, _655.y, _655.z, r5.w);
    float3 _665 = (r3.xyw * r5.xyz) + r4.xyz;
    r3 = float4(_665.x, _665.y, _665.z, r3.w);
    r4 = tex2D(SPIRV_Cross_Combinedt1s1, shader_in[1].xyxx.xy);
    float3 _686 = r4.xyz * float3(cb2_m[3].x, cb2_m[3].y, cb2_m[3].z);
    r5 = float4(_686.x, _686.y, _686.z, r5.w);
    float3 _693 = r3.xyz * r5.xyz;
    r3 = float4(_693.x, _693.y, _693.z, r3.w);
    float3 _704 = (r5.xyz * r1.xxx) + (-r3.xyz);
    r6 = float4(_704.x, _704.y, _704.z, r6.w);
    float3 _715 = (r1.yyy * r6.xyz) + r3.xyz;
    r1 = float4(r1.x, _715.x, _715.y, _715.z);
    float4 _723 = r0;
    _723.y = (-r1.x) + asfloat(1065353216u);
    r0 = _723;
    float4 _734 = r0;
    _734.y = ((-r0.y) * cb2_m[6].x) + asfloat(1065353216u);
    r0 = _734;
    float3 _743 = (r2.xyz * r0.yyy) + r1.yzw;
    r1 = float4(r1.x, _743.x, _743.y, _743.z);
    float3 _756 = r1.yzw * float3(cb1_m[0].x, cb1_m[0].y, cb1_m[0].z);
    r1 = float4(r1.x, _756.x, _756.y, _756.z);
    float2 _768 = shader_in[0].xy * float2(cb0_m[6].z, cb0_m[6].w);
    r0 = float4(r0.x, _768.x, r0.z, _768.y);
    r2 = tex2D(SPIRV_Cross_Combinedt15s15, r0.ywyy.xy);
    float3 _782 = r1.yzw * r2.yyy;
    r1 = float4(r1.x, _782.x, _782.y, _782.z);
    float4 _790 = r0;
    _790.y = min(r1.x, r2.y);
    r0 = _790;
    float3 _809 = float3(cb0_m[2].x, cb0_m[2].y, cb0_m[2].z) + (-float3(cb0_m[3].x, cb0_m[3].y, cb0_m[3].z));
    r2 = float4(_809.x, _809.y, _809.z, r2.w);
    float3 _825 = (r0.xxx * r2.xyz) + float3(cb0_m[3].x, cb0_m[3].y, cb0_m[3].z);
    r2 = float4(_825.x, _825.y, _825.z, r2.w);
    float3 _836 = ((-r2.xyz) * r0.yyy) + r2.xyz;
    r0 = float4(_836.x, _836.y, r0.z, _836.z);
    float4 _845 = r1;
    _845.x = max(cb0_m[1].w, asfloat(1048576000u));
    r1 = _845;
    float4 _851 = r1;
    _851.x = min(r1.x, asfloat(1065353216u));
    r1 = _851;
    float4 _858 = r0;
    _858.z = r0.z * r1.x;
    r0 = _858;
    float4 _865 = r0;
    _865.z = r0.z * asfloat(1091567616u);
    r0 = _865;
    float4 _872 = r1;
    _872.x = cb0_m[1].w * asfloat(1069547520u);
    r1 = _872;
    float4 _878 = r1;
    _878.x = max(r1.x, asfloat(1065353216u));
    r1 = _878;
    float4 _884 = r1;
    _884.x = min(r1.x, asfloat(1069547520u));
    r1 = _884;
    float3 _893 = (r0.xyw * r1.xxx) + r0.zzz;
    r0 = float4(_893.x, _893.y, _893.z, r0.w);
    float3 _903 = (r0.xyz * r5.xyz) + r1.yzw;
    r0 = float4(_903.x, _903.y, _903.z, r0.w);
    float4 _912 = r0;
    _912.w = (-shader_in[4].w) + asfloat(1065353216u);
    r0 = _912;
    float3 _918 = r0.xyz * r0.www;
    r0 = float4(_918.x, _918.y, _918.z, r0.w);
    float3 _935 = (shader_in[4].www * float3(cb0_m[4].x, cb0_m[4].y, cb0_m[4].z)) + r0.xyz;
    r4 = float4(_935.x, _935.y, _935.z, r4.w);
    o0 = r4 * float4(cb6_m[0].x, cb6_m[0].y, cb6_m[0].z, cb6_m[0].w);
}

void frag_main()
{
    shader_in[1] = float4(v1.x, v1.y, shader_in[1].z, shader_in[1].w);
    shader_in[2] = float4(v2.x, v2.y, v2.z, shader_in[2].w);
    shader_in[3] = float4(v3.x, v3.y, v3.z, shader_in[3].w);
    shader_in[4] = v4;
    float4 _966 = gl_FragCoord;
    _966.w = 1.0f / _966.w;
    shader_in[0] = float4(_966.xy.x, _966.xy.y, shader_in[0].z, shader_in[0].w);
    ps_main();
}

void main(SPIRV_Cross_Input stage_input)
{
    gl_FragCoord = stage_input.gl_FragCoord + float4(0.5f, 0.5f, 0.0f, 0.0f);
    v1 = stage_input.v1;
    v2 = stage_input.v2;
    v3 = stage_input.v3;
    v4 = stage_input.v4;
    frag_main();
}
